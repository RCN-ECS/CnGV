for(i in 1:length(n_trade)){
firstday = start_amnt * (1+rate)
start_amnt = firstday
temp = data.frame("Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
plot_df = out
p = ggplot(plot_df, aes(x = Trade_number, y = Dollars))+geom_point()+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade: ",(rate*100), " %"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}
return(p)
}
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj = Projections(1100, 50, rate = 0.06)
Proj
Proj_shortterm = Projections(500, 50)
Proj_longterm
Proj_shortterm = Projections(500, 50)
Proj_shortterm
Proj_shortterm
# Yearly projections
# I am allowed 4 trades per week, for about 50 weeks, which gives me 200 total trades
# The range of outcomes gives me an average profit of 5% per trade (OVERALL, so some over, some under), use to guide decisions
Projections <- function(start, n_trades, rate = FALSE){
n_trade = c(1:n_trades)
start_amnt = start
if(rate == FALSE){
delta = seq(from = 0.85, to = 1.25, by = 0.01)
samples = c(1:100)
out = data.frame()
for(j in 1:length(samples)){
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * sample(delta,1,)
start_amnt = firstday
temp = data.frame("Round" = samples[j],
"Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
}
plot_df = data.frame()
for(i in 1:length(unique(out$Trade_number))){
group = filter(out, Trade_number == unique(out$Trade_number)[i])
profit = mean(group$Dollars)
CI = quantile(group$Dollars, probs=c(0.025, 0.975), type=1)
out. = data.frame("Trade_number" = unique(out$Trade_number)[i],
"Mean_profit" = profit,
"LwrCI" = CI[[1]],
"UprCI" = CI[[2]])
plot_df = rbind(plot_df, out.)
}
p = ggplot(plot_df, aes(x = Trade_number, y = Mean_profit))+geom_point()+geom_errorbar(aes(ymin = LwrCI, ymax = UprCI))+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade:",mean(delta),"%"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}else{
delta = rate
out = data.frame()
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * (1+rate)
start_amnt = firstday
temp = data.frame("Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
plot_df = out
p = ggplot(plot_df, aes(x = Trade_number, y = Dollars))+geom_point()+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade: ",(rate*100), " %"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}
return(p)
}
Proj_shortterm = Projections(500, 50)
Proj_shortterm
delta = seq(from = 0.85, to = 1.25, by = 0.01)
mean(delta)
delta = seq(from = 0.85, to = 1.25, by = 0.01)
mean(delta)
1.05/100
1.05-1
# Yearly projections
# I am allowed 4 trades per week, for about 50 weeks, which gives me 200 total trades
# The range of outcomes gives me an average profit of 5% per trade (OVERALL, so some over, some under), use to guide decisions
Projections <- function(start, n_trades, rate = FALSE){
n_trade = c(1:n_trades)
start_amnt = start
if(rate == FALSE){
delta = seq(from = 0.85, to = 1.25, by = 0.01)
samples = c(1:200)
out = data.frame()
for(j in 1:length(samples)){
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * sample(delta,1,)
start_amnt = firstday
temp = data.frame("Round" = samples[j],
"Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
}
plot_df = data.frame()
for(i in 1:length(unique(out$Trade_number))){
group = filter(out, Trade_number == unique(out$Trade_number)[i])
profit = mean(group$Dollars)
CI = quantile(group$Dollars, probs=c(0.025, 0.975), type=1)
out. = data.frame("Trade_number" = unique(out$Trade_number)[i],
"Mean_profit" = profit,
"LwrCI" = CI[[1]],
"UprCI" = CI[[2]])
plot_df = rbind(plot_df, out.)
}
p = ggplot(plot_df, aes(x = Trade_number, y = Mean_profit))+geom_point()+geom_errorbar(aes(ymin = LwrCI, ymax = UprCI))+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade:",(1-mean(delta))*100,"%"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}else{
delta = rate
out = data.frame()
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * (1+rate)
start_amnt = firstday
temp = data.frame("Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
plot_df = out
p = ggplot(plot_df, aes(x = Trade_number, y = Dollars))+geom_point()+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade: ",(rate*100), " %"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}
return(p)
}
Proj_shortterm = Projections(500, 50)
Proj_shortterm
# Yearly projections
# I am allowed 4 trades per week, for about 50 weeks, which gives me 200 total trades
# The range of outcomes gives me an average profit of 5% per trade (OVERALL, so some over, some under), use to guide decisions
Projections <- function(start, n_trades, rate = FALSE){
n_trade = c(1:n_trades)
start_amnt = start
if(rate == FALSE){
delta = seq(from = 0.85, to = 1.25, by = 0.01)
samples = c(1:200)
out = data.frame()
for(j in 1:length(samples)){
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * sample(delta,1,)
start_amnt = firstday
temp = data.frame("Round" = samples[j],
"Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
}
plot_df = data.frame()
for(i in 1:length(unique(out$Trade_number))){
group = filter(out, Trade_number == unique(out$Trade_number)[i])
profit = mean(group$Dollars)
CI = quantile(group$Dollars, probs=c(0.025, 0.975), type=1)
out. = data.frame("Trade_number" = unique(out$Trade_number)[i],
"Mean_profit" = profit,
"LwrCI" = CI[[1]],
"UprCI" = CI[[2]])
plot_df = rbind(plot_df, out.)
}
p = ggplot(plot_df, aes(x = Trade_number, y = Mean_profit))+geom_point()+geom_errorbar(aes(ymin = LwrCI, ymax = UprCI))+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade:",(mean(delta)-1)*100,"%"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}else{
delta = rate
out = data.frame()
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * (1+rate)
start_amnt = firstday
temp = data.frame("Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
plot_df = out
p = ggplot(plot_df, aes(x = Trade_number, y = Dollars))+geom_point()+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade: ",(rate*100), " %"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}
return(p)
}
Proj_shortterm = Projections(500, 50)
Proj_shortterm
Proj_shortterm = Projections(1100, 250)
Proj_shortterm
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj_longterm = Projections(1100, 50, rate = 0.06)
Proj_longterm
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj_longterm = Projections(1100, 250, rate = 0.06)
Proj_longterm
# Yearly projections
# I am allowed 4 trades per week, for about 50 weeks, which gives me 200 total trades
# The range of outcomes gives me an average profit of 5% per trade (OVERALL, so some over, some under), use to guide decisions
Projections <- function(start, n_trades, rate = FALSE){
n_trade = c(1:n_trades)
start_amnt = start
if(rate == FALSE){
delta = seq(from = 0.85, to = 1.25, by = 0.01)
samples = c(1:200)
out = data.frame()
for(j in 1:length(samples)){
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * sample(delta,1,)
start_amnt = firstday
temp = data.frame("Round" = samples[j],
"Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
}
plot_df = data.frame()
for(i in 1:length(unique(out$Trade_number))){
group = filter(out, Trade_number == unique(out$Trade_number)[i])
profit = mean(group$Dollars)
CI = quantile(group$Dollars, probs=c(0.025, 0.975), type=1)
out. = data.frame("Trade_number" = unique(out$Trade_number)[i],
"Mean_profit" = profit,
"LwrCI" = CI[[1]],
"UprCI" = CI[[2]])
plot_df = rbind(plot_df, out.)
}
p = ggplot(plot_df, aes(x = Trade_number, y = Mean_profit))+geom_point()+geom_errorbar(aes(ymin = LwrCI, ymax = UprCI))+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade:",(mean(delta)-1)*100,"%"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}else{
delta = rate
out = data.frame()
start_amnt = start
for(i in 1:length(n_trade)){
firstday = start_amnt * (1+rate)
start_amnt = firstday
temp = data.frame("Trade_number" = n_trade[i],
"Dollars" = firstday)
out = rbind(out, temp)
}
plot_df = out
p = ggplot(plot_df, aes(x = Trade_number, y = Dollars))+geom_point()+
theme_linedraw(base_size = 20, base_family = "Times")+
ggtitle(paste("Average Return per Trade: ",(rate*100), " %"))+
theme(axis.text = element_text(colour = "black")) + xlab("Trade Number") + ylab("Total Profit ($)")
}
return(p)
}
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj_longterm = Projections(1100, 250, rate = 0.06)
Proj_longterm
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj_longterm = Projections(1100, 50, rate = 0.06)
Proj_longterm
# Start is the total amount that you will be using per trade (may go up over time)
# For long term estimations, use rate = "x" to set increase rate
# For short term projections, rate = FALSE will get the confidence intervals and samples
Proj_longterm = Projections(1100, 100, rate = 0.06)
Proj_longterm
65-35
30*365
10950/5
10950/7
###### Estimated Trade Outcomes #######
# Goal is between +5-7% per trade DONT BE GREEDY OR YOU'LL LOSE IT ALL.
ProfitEstimator <- function(x, budget, max_growth = NULL){ # x is starting bid, budget is amount, max_growth is if there is another target other than 20% - enter as decimal
max_shares = floor(budget/x)
nshares = c(1:max_shares)
if(is.null(max_growth) == TRUE){max_percent = 1.2
}else if(max_growth < 1.0){max_percent = 1+ max_growth
}else{max_percent = max_growth}
profit_percent = seq(from = 1.01, to = max_percent, length.out = 10)
profits = data.frame()
for(i in 1:length(nshares)){
for(j in 1:length(profit_percent)){
price = (nshares[i]*x)
gross_profit =  price*(profit_percent[j])
net_profit = gross_profit - price
profits1= data.frame("nshares" = nshares[i],
"profit_percent" = profit_percent[j],
"gross_profit" = gross_profit,
"net_profit" = net_profit)
profits = rbind(profits,profits1)
}
}
if(max(profits$net_profit)<10){
ybreak = 0.5
xbreak = 1
fonty = 20
}else{
ybreak = 2
xbreak = 2
fonty = 12}
profits1 = profits %>%
mutate(label = if_else(nshares == max_shares, as.character(round((profit_percent-1)*100),2), NA_character_))
print(ggplot(profits1, aes(x = nshares, y = net_profit))+
geom_line(aes(group = factor(profit_percent),colour = factor(profit_percent)),size = 1.5)+
scale_colour_viridis(option="inferno",discrete = TRUE)+
geom_label_repel(aes(label = label), nudge_x = 0, na.rm = TRUE)+
scale_x_continuous(breaks = c(1:max_shares))+
scale_y_continuous(breaks = seq(from = 0, to = max(net_profit), by = ybreak))+
ggtitle(paste("Entry Price: $",x,""))+
theme_linedraw(base_size= fonty, base_family = "Arial")+
theme(legend.position="none")+
xlab("Number of Shares")+ylab("Estimated Profit in dollars"))
output1 = data.frame("N_shares" = profits$nshares,
"Entry" = x,
"Profit_Percent" = round(profits$profit_percent-1,2)*100,
"Profit_Dollars" = profits$net_profit,
"Exit_Point" = profits$gross_profit,
"Stop1to5" = profits$gross_profit-(profits$gross_profit*0.2),
"Stop1to4" = profits$gross_profit-(profits$gross_profit*0.25),
"Stop1to3" = profits$gross_profit-(profits$gross_profit*0.33),
"Stop1to2" = profits$gross_profit-(profits$gross_profit*0.5))
output = filter(output1, N_shares == 1)
return(output)
}
entry_price = 28
budget = 100
ProfitEstimator(entry_price, budget)
125+145
270/2
###### Estimated Trade Outcomes #######
# Goal is between +5-7% per trade DONT BE GREEDY OR YOU'LL LOSE IT ALL.
ProfitEstimator <- function(x, budget, max_growth = NULL){ # x is starting bid, budget is amount, max_growth is if there is another target other than 20% - enter as decimal
max_shares = floor(budget/x)
nshares = c(1:max_shares)
if(is.null(max_growth) == TRUE){max_percent = 1.2
}else if(max_growth < 1.0){max_percent = 1+ max_growth
}else{max_percent = max_growth}
profit_percent = seq(from = 1.01, to = max_percent, length.out = 10)
profits = data.frame()
for(i in 1:length(nshares)){
for(j in 1:length(profit_percent)){
price = (nshares[i]*x)
gross_profit =  price*(profit_percent[j])
net_profit = gross_profit - price
profits1= data.frame("nshares" = nshares[i],
"profit_percent" = profit_percent[j],
"gross_profit" = gross_profit,
"net_profit" = net_profit)
profits = rbind(profits,profits1)
}
}
if(max(profits$net_profit)<10){
ybreak = 0.5
xbreak = 1
fonty = 20
}else{
ybreak = 2
xbreak = 2
fonty = 12}
profits1 = profits %>%
mutate(label = if_else(nshares == max_shares, as.character(round((profit_percent-1)*100),2), NA_character_))
print(ggplot(profits1, aes(x = nshares, y = net_profit))+
geom_line(aes(group = factor(profit_percent),colour = factor(profit_percent)),size = 1.5)+
scale_colour_viridis(option="inferno",discrete = TRUE)+
geom_label_repel(aes(label = label), nudge_x = 0, na.rm = TRUE)+
scale_x_continuous(breaks = c(1:max_shares))+
scale_y_continuous(breaks = seq(from = 0, to = max(net_profit), by = ybreak))+
ggtitle(paste("Entry Price: $",x,""))+
theme_linedraw(base_size= fonty, base_family = "Arial")+
theme(legend.position="none")+
xlab("Number of Shares")+ylab("Estimated Profit in dollars"))
output1 = data.frame("N_shares" = profits$nshares,
"Entry" = x,
"Profit_Percent" = round(profits$profit_percent-1,2)*100,
"Profit_Dollars" = profits$net_profit,
"Exit_Point" = profits$gross_profit,
"Stop1to5" = profits$gross_profit-(profits$gross_profit*0.2),
"Stop1to4" = profits$gross_profit-(profits$gross_profit*0.25),
"Stop1to3" = profits$gross_profit-(profits$gross_profit*0.33),
"Stop1to2" = profits$gross_profit-(profits$gross_profit*0.5))
output = filter(output1, N_shares == 1)
return(output)
}
entry_price = 46
budget = 125
ProfitEstimator(entry_price, budget)
500*0.2
entry_price = 46.40
budget = 125
ProfitEstimator(entry_price, budget)
entry_price = 318
budget = 500
ProfitEstimator(entry_price, budget)
9210-376
850*2
8834-1700
1100+650
# Load Data compiled on cluster
setwd("~/Documents/GitHub/CnGV/CnGV/results/Sim_12.15.20/")
start_params = read.csv("~/Desktop/df.csv")                      # Input Parameters
start_df1 = read.csv("Power_output_results.csv")                 # Results of simulations
# Split up into two experimental designs
dat_csv = start_df %>% filter(env_scenario == 1) %>% droplevels() # Reciprocal Transplant
start_df1 = read.csv("Power_output_results.csv")                 # Results of simulations
start_df = start_df1 %>% filter(row %in% start_params$row)
# Split up into two experimental designs
dat_csv = start_df %>% filter(env_scenario == 1) %>% droplevels() # Reciprocal Transplant
names(dat_csv)
setwd("~/Documents/GitHub/CnGV/CnGV/src/")
# Molly's age at metamorphosis data
mm = read.csv("~/Desktop/Work/DataSets/Tadpole Plasticity_2017/mortality2017.csv")
mm = mm[-which(is.na(mm$Jul_metamorph)),] # Include only those that metamorphosed
mm$age = mm$Jul_metamorph-mm$Jul_hatch # Calculate age at MM
# Rename variables for analysis
mm1 = mm %>%
filter(Pop != "BELL") %>% # Exclude bellamy bc missing data at 6ppt
filter(tad %in% c(0,6)) %>% # Only use 0, 6ppt
droplevels()
mm1$gen_factor = paste0("G_",as.numeric(factor(mm1$Pop)))
mm1$exp_env_factor = paste0("E_",as.numeric(as.factor(mm1$tad)))
mm1$nat_env_factor = NULL
for(i in 1:nrow(mm1)){
if(mm1$Pop[i] == "BOD" | mm1$Pop[i] == "CSI" |mm1$Pop[i] == "LH" |mm1$Pop[i] == "DQ"){ mm1$nat_env_factor[i] = "E_2"
}else{ mm1$nat_env_factor[i] = "E_1"}
}
ma = data.frame("data_type" = rep("raw", nrow(mm1)),
"gen_factor" = mm1$gen_factor,
"exp_env_factor" = factor(mm1$exp_env_factor),
"nat_env_factor" = factor(mm1$nat_env_factor), # E_2 = coastal; E_1 = inland
"phen_data"= mm1$age)
write.csv(ma, "~/Documents/GitHub/CnGV/CnGV/src/frog.csv")
# Functions
setwd("~/Documents/GitHub/CnGV/CnGV/src/")
source("Cov_GxE_functions.R")
# Dataset
frog <- read.csv("frog.csv")
frog
ma
str(frog)
# Dataset
frog <- read.csv("frog.csv")
# Functions
setwd("~/Documents/GitHub/CnGV/CnGV/src/")
source("Cov_GxE_functions.R")
# Dataset
frog <- read.csv("frog.csv")
mm1$gen_factor = paste0("G_",as.numeric(factor(mm1$Pop)))
mm1$exp_env_factor = paste0("E_",as.numeric(as.factor(mm1$tad)))
mm1$nat_env_factor = NULL
for(i in 1:nrow(mm1)){
if(mm1$Pop[i] == "BOD" | mm1$Pop[i] == "CSI" |mm1$Pop[i] == "LH" |mm1$Pop[i] == "DQ"){ mm1$nat_env_factor[i] = "E_2"
}else{ mm1$nat_env_factor[i] = "E_1"}
}
ma = data.frame("data_type" = rep("raw", nrow(mm1)),
"gen_factor" = mm1$gen_factor,
"exp_env_factor" = factor(mm1$exp_env_factor),
"nat_env_factor" = factor(mm1$nat_env_factor), # E_2 = coastal; E_1 = inland
"phen_data"= mm1$age)
mm1
frog$gen_factor = factor(frog$gen_factor)
frog$exp_env_factor = factor(frog$exp_env_factor)
data_type <- "raw"
n_boot <- 9
frog$group = paste(frog$gen_factor,frog$exp_env_factor,sep = "-")
frog$phen_corrected = (frog$phen_data - mean(frog$phen_data, na.rm = TRUE))/sd(tapply(frog$phen_data, frog$group, mean, na.rm = TRUE))
results = amarillo_armadillo(frog, n_boot, data_type)
# Functions
setwd("~/Documents/GitHub/CnGV/CnGV/src/")
source("Cov_GxE_functions.R")
results = amarillo_armadillo(frog, n_boot, data_type)
source("CovarianceDataFunctions.R.R")
source("CovarianceDataFunctions.R")
# Dataset
frog <- read.csv("frog.csv")
results = amarillo_armadillo(frog, n_boot, data_type)
# Raw data:
frog$group = paste(frog$gen_factor,frog$exp_env_factor,sep = "-")
frog$phen_corrected = (frog$phen_data - mean(frog$phen_data, na.rm = TRUE))/sd(tapply(frog$phen_data, frog$group, mean, na.rm = TRUE))
results = amarillo_armadillo(frog, n_boot, data_type)
frog$gen_factor = factor(frog$gen_factor)
frog$exp_env_factor = factor(frog$exp_env_factor)
n_boot <- 9
data_type <- "raw"
# Raw data:
frog$group = paste(frog$gen_factor,frog$exp_env_factor,sep = "-")
frog$phen_corrected = (frog$phen_data - mean(frog$phen_data, na.rm = TRUE))/sd(tapply(frog$phen_data, frog$group, mean, na.rm = TRUE))
results = amarillo_armadillo(frog, n_boot, data_type)
results
n_boot = 999
results = amarillo_armadillo(frog, n_boot, data_type)
results = amarillo_armadillo(frog, n_boot, data_type)
results
125+147
272/2
