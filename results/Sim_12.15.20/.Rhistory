geom_point()+theme_classic()+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+
geom_hline(yintercept = 0.05,colour = "red"))
(ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times" )+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+
geom_hline(yintercept = 0.05,colour = "red"))
(ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "")
geom_hline(yintercept = 0.05,colour = "red"))
(ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "")+
geom_hline(yintercept = 0.05,colour = "red"))
(ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic()+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval1 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic()+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE Means Pvalue")+xlab("GxE Anova Pvalue")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval1 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE Means P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations")+
geom_hline(yintercept = 0.05,colour = "red"))
grid.arrange(pval1,pval2)
(pval1 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations",colour = "GxE")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval1 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm,shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE EMM P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations",colour = "GxE")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE Means P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations",colour = "GxE -- Group Means")+
geom_hline(yintercept = 0.05,colour = "red"))
(pval2 = ggplot(filter(dat_csv, replicate ==1),aes(x = GxE_Anova, y = GxE_means_pvalue,colour = GxE_means, shape = factor(n_pop)))+ # means data
geom_point()+theme_classic(base_size = 20, base_family = "Times")+ylab("GxE Means P-value")+xlab("GxE Anova P-value")+
geom_vline(xintercept = 0.05,colour = "red")+labs(shape = "Number of Populations",colour = "Delta GxE -- Group Means")+
geom_hline(yintercept = 0.05,colour = "red"))
grid.arrange(pval1,pval2)
suspect.pvals = dat_csv %>% # raw
filter(GxE_emm_pvalue >= 0.05) %>%
filter(GxE_Anova <= 0.05)
(ggplot(suspect.pvals,aes(x = GxE_Anova, y = GxE_emm_pvalue,colour = GxE_emm))+
geom_point()+theme_classic()+ylab("GxE EMM Pvalue")+xlab("GxE Anova Pvalue")+
geom_hline(yintercept = 0.05,colour = "red"))
suspect.pvals.mean = dat_csv %>% # mean
filter(GxE_means_pvalue >= 0.05) %>%
filter(GxE_Anova <= 0.05)
(ggplot(suspect.pvals.mean, aes(x = GxE_means, y = GxE_emm_pvalue)) +
geom_point()+theme_classic())
# Make Tables of Confusion Matrix
(cov_confint = dat_csv1 %>%
group_by(Covconfintperm) %>%
summarize(frequency = n()))
(cov_boot = dat_csv1 %>%
group_by(Covconfintboot) %>%
summarize(frequency = n()))
(gxe_confint = dat_csv1 %>%
group_by(GxEconfintperm) %>%
summarize(frequency = n()))
(GxE_boot = dat_csv1 %>%
group_by(GxEconfintboot) %>%
summarize(frequency = n()))
grid.arrange(gxemeancheck2, gxeerrorcheck2)
(gxemeancheck2 = ggplot(dat_dub,aes(x = true_GxE_emm, y = true_GxE_means))+
geom_point()+theme_classic()+ylab(expression(bar(Delta)*""["GxE"]*": Means data"))+xlab(expression(bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
(gxeerrorcheck2 = ggplot(dat_dub, aes(x = gxeerror,y = meangxeerror)) +
geom_point(alpha = 0.5)+ylab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Means data"))+xlab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(gxemeancheck2, gxeerrorcheck2)
(gxemeancheck2 = ggplot(dat_dub,aes(x = true_GxE_emm, y = true_GxE_means))+
geom_point()+theme_classic()+ylab(expression(bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression(bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
(gxeerrorcheck2 = ggplot(dat_dub, aes(x = gxeerror,y = meangxeerror)) +
geom_point(alpha = 0.5)+ylab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(gxemeancheck2, gxeerrorcheck2)
(covmeancheck2 = ggplot(dat_dub,aes(x = covariance, y = cov_means))+
geom_point()+ylab(expression("Cov"["GE"]*": Group Means"))+xlab(expression("Cov"["GE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
is.empty <- function(x, mode=NULL){
if (is.null(mode)) mode <- class(x)
identical(vector(mode,1),c(x,vector(class(x),1)))
}
## Confusion Matrix data wrangling ##
fpr.fnr <- function(input_df, divided, scenario){
is.empty <- function(x, mode=NULL){
if (is.null(mode)) mode <- class(x)
identical(vector(mode,1),c(x,vector(class(x),1)))
}
df <- data.frame()
if(divided == TRUE){
for(i in 1:length(unique(input_df$sample_size))){
for(j in 1:length(unique(input_df$n_pop))){
fn1 = fn = fp1 = fp = tn1 = tn = tp1 = tp = fnr = fpr = NULL
ss = unique(input_df$sample_size)[i]
np = unique(input_df$n_pop)[j]
tempdf <- input_df %>%
filter(sample_size == ss) %>%
filter(n_pop == np)
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
fpr = fp/(fp+tn)
n = c(fn, fp, tn, tp)
rate = c(fnr,fpr,NA,NA)
n_env = if(scenario == 1){n_env = unique(tempdf$n_pop)}else{n_env = 2}
total = sum(n)
percent = (n/total)*100
df. <- data.frame("name" = c("False Negative", "False Positive", "True Negative", "True Positive"),
"sample_size" = rep(ss,4),
"n_pop" = rep(np,4),
"totsamp" = rep(unique(tempdf$n_pop) * n_env * unique(tempdf$sample_size),4),
"n" = n,
"total" = total,
"percent" = round(percent,2),
"rate" = round(rate,2))
df <- rbind(df,df.)
}
}
}else{
fn1 = fn = fp1 = fp = tn1 = tn = tp1 = tp = fnr = fpr = NA
fn1 = input_df$n[input_df$name == "False Negative"]
fp1 = input_df$n[input_df$name == "False Positive"]
tn1 = input_df$n[input_df$name == "True Negative"]
tp1 = input_df$n[input_df$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
fpr = fp/(fp+tn)
n = c(fn, fp, tn, tp)
rate = c(fnr,fpr,NA,NA)
total = sum(n)
percent = (n/total)*100
df <- data.frame("name" = c("False Negative", "False Positive", "True Negative", "True Positive"),
"n" = n,
"total" = total,
"percent" = round(percent,2),
"rate" = round(rate,2))
}
return(df)
} # Result goes into heatmap_fun
## Confusion Matrix Heatmaps ##
heatmap_fun <- function(plot_data, plot_type){ #plot_type is "percent" or "rate"
p <- list()
if(plot_type == "percent"){
for(i in 1:length(unique(plot_data$name))){
subcat <- filter(plot_data, name == unique(plot_data$name)[i])
p[[i]] <- ggplot(subcat,aes(x = factor(sample_size), y = factor(n_pop), fill = percent)) +
geom_tile() +
geom_text(aes(label= paste(round(percent,3), totsamp,sep = '\n')), size = 5) +
theme_classic(base_size = 12, base_family = "Times") +
scale_fill_gradient2(#low="#DDDDDD", mid="#99CCEE", high="#000044", #colors in the scale
#                     midpoint=mean(rng.gxe2),    #same midpoint for plots (mean of the range)
#                     breaks=seq(0,1,0.25), #breaks in the scale bar
limits=c(0,1))+
xlab("Sample Size") + ylab("Number of Populations")+
#labs(fill = "Percent")+
theme(axis.text = element_text(colour = "black"))+
theme(legend.position = "none")+
ggtitle(unique(subcat$name))+
theme(plot.title = element_text(size = 16, face = "bold"))
}
}else{
for(i in 1:length(unique(plot_data$name))){
subcat <- filter(plot_data, name == unique(plot_data$name)[i])
if(unique(is.na(subcat$rate))==TRUE){next}
p[[i]] <- ggplot(subcat,aes(x = factor(sample_size), y = factor(n_pop), fill = rate)) +
geom_tile() +
geom_text(aes(label= paste(round(rate,3), totsamp,sep = '\n')), size = 5) +
theme_classic(base_size = 12, base_family = "Times")+
scale_fill_gradient2(limits=c(0,1))+
xlab("Sample Size") + ylab("Number of Populations")+
#labs(fill = "Percent")+
theme(axis.text = element_text(colour = "black"))+
theme(legend.position = "none")+
ggtitle(unique(subcat$name))+
theme(plot.title = element_text(size = 16, face = "bold"))
}
}
return(do.call(grid.arrange, p))
}
## Calculate Power and False Negative rates
fnr.effsize <- function(x, metric, analysis, scenario = 1, resolution){ # metric = Cov or GxE; analysis is perm or boot or anova
# metric = "Cov" or "GxE"
# analysis = "perm" or "boot"
# scenario = 1 or 2
# resolution = "fine" (for heatmaps) or "coarse" (for barplots)
output = data.frame()
if(metric == "Cov"){
if(resolution == "coarse"){
x$binCov = "NA"
for(i in 1:nrow(x)){
if(abs(x$true_cov[i]) > 0 & abs(x$true_cov[i]) <= 0.25){x$binCov[i] = 0.25
}else if(abs(x$true_cov[i]) > 0.25 & abs(x$true_cov[i]) <= 0.5){x$binCov[i] = 0.5
}else if(abs(x$true_cov[i]) > 0.5 & abs(x$true_cov[i]) <= 0.75){x$binCov[i] = 0.75
}else{x$binCov[i] = 1}
}
}else{
x$binCov = "NA"
for(i in 1:nrow(x)){
if(x$true_cov[i] == 0){x$binCov[i] = 0
}else if(abs(x$true_cov[i]) > 0 & abs(x$true_cov[i]) <= 0.15){x$binCov[i] = 0.1
}else if(abs(x$true_cov[i]) > 0.15 & abs(x$true_cov[i]) <= 0.25){x$binCov[i] = 0.2
}else if(abs(x$true_cov[i]) > 0.25 & abs(x$true_cov[i]) <= 0.35){x$binCov[i] = 0.3
}else if(abs(x$true_cov[i]) > 0.35 & abs(x$true_cov[i]) <= 0.45){x$binCov[i] = 0.4
}else if(abs(x$true_cov[i]) > 0.45 & abs(x$true_cov[i]) <= 0.55){x$binCov[i] = 0.5
}else if(abs(x$true_cov[i]) > 0.55 & abs(x$true_cov[i]) <= 0.65){x$binCov[i] = 0.6
}else if(abs(x$true_cov[i]) > 0.65 & abs(x$true_cov[i]) <= 0.75){x$binCov[i] = 0.7
}else if(abs(x$true_cov[i]) > 0.75 & abs(x$true_cov[i]) <= 0.85){x$binCov[i] = 0.8
}else if(abs(x$true_cov[i]) > 0.85 & abs(x$true_cov[i]) <= 0.95){x$binCov[i] = 0.9
}else{x$binCov[i] = 1}
}
}
for(i in 1:length(unique(x$sample_size))){
for(j in 1:length(unique(x$n_pop))){
for(k in 1:length(unique(x$binCov))){
fn1 = fn = fp1 = fp = tn1 = tn = tp1 = tp = fnr = fpr = NULL
ss = unique(x$sample_size)[i]
np = unique(x$n_pop)[j]
bc = unique(x$binCov)[k]
if(analysis == "perm"){
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binCov == bc) %>%
group_by("name" = Covconfintperm,sample_size,n_pop,binCov)%>%
summarise(n = n())
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
output1 = data.frame(sample_size = ss,
n_pop = np,
bin = bc,
fnr = fnr,
power = 1-fnr)
output = rbind(output, output1)
}else{
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binCov == bc) %>%
group_by("name" = Covconfintboot,sample_size,n_pop,binCov)%>%
summarise(n = n())
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
output1 = data.frame(sample_size = ss,
n_pop = np,
bin = bc,
fnr = fnr,
power = 1-fnr)
output = rbind(output, output1)
}
}
}
}
}else{
if(resolution == "course"){
x$binGxE = "NA"
for(i in 1:nrow(x)){
if(abs(x$true_GxE_emm[i]) > 0 & abs(x$true_GxE_emm[i]) <= 0.25){x$binGxE[i] = 0.25
}else if(abs(x$true_GxE_emm[i]) > 0.25 & abs(x$true_GxE_emm[i]) <= 0.5){x$binGxE[i] = 0.5
}else if(abs(x$true_GxE_emm[i]) > 0.5 & abs(x$true_GxE_emm[i]) <= 0.75){x$binGxE[i] = 0.75
}else{x$binGxE[i] = 1}
}
}else{
x$binGxE = "NA"
for(i in 1:nrow(x)){
if(x$true_GxE_emm[i] == 0){x$binGxE[i] = 0
}else if(abs(x$true_GxE_emm[i]) > 0 & abs(x$true_GxE_emm[i]) <= 0.15){x$binGxE[i] = 0.1
}else if(abs(x$true_GxE_emm[i]) > 0.15 & abs(x$true_GxE_emm[i]) <= 0.25){x$binGxE[i] = 0.2
}else if(abs(x$true_GxE_emm[i]) > 0.25 & abs(x$true_GxE_emm[i]) <= 0.35){x$binGxE[i] = 0.3
}else if(abs(x$true_GxE_emm[i]) > 0.35 & abs(x$true_GxE_emm[i]) <= 0.45){x$binGxE[i] = 0.4
}else if(abs(x$true_GxE_emm[i]) > 0.45 & abs(x$true_GxE_emm[i]) <= 0.55){x$binGxE[i] = 0.5
}else if(abs(x$true_GxE_emm[i]) > 0.55 & abs(x$true_GxE_emm[i]) <= 0.65){x$binGxE[i] = 0.6
}else if(abs(x$true_GxE_emm[i]) > 0.65 & abs(x$true_GxE_emm[i]) <= 0.75){x$binGxE[i] = 0.7
}else if(abs(x$true_GxE_emm[i]) > 0.75 & abs(x$true_GxE_emm[i]) <= 0.85){x$binGxE[i] = 0.8
}else if(abs(x$true_GxE_emm[i]) > 0.85 & abs(x$true_GxE_emm[i]) <= 0.95){x$binGxE[i] = 0.9
}else{x$binGxE[i] = 1}
}
}
for(i in 1:length(unique(x$sample_size))){
for(j in 1:length(unique(x$n_pop))){
for(k in 1:length(unique(x$binGxE))){
fn1 = fn = fp1 = fp = tn1 = tn = tp1 = tp = fnr = fpr = NULL
ss = unique(x$sample_size)[i]
np = unique(x$n_pop)[j]
bc = unique(x$binGxE)[k]
if(analysis == "perm"){
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binGxE == bc) %>%
group_by("name" = GxEconfintperm,sample_size,n_pop,binGxE)%>%
summarise(n = n())
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
output1 = data.frame(sample_size = ss,
n_pop = np,
bin = bc,
fnr = fnr,
power = 1-fnr)
output = rbind(output, output1)
}else if(analysis == "boot"){
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binGxE == bc) %>%
group_by("name" = GxEconfintboot,sample_size,n_pop,binGxE)%>%
summarise(n = n())
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
output1 = data.frame(sample_size = ss,
n_pop = np,
bin = bc,
fnr = fnr,
power = 1-fnr)
output = rbind(output, output1)
}else{
if(scenario == 1){
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binGxE == bc) %>%
group_by("name" = GxEanova_conf,sample_size,n_pop,binGxE)%>%
summarise(n = n())
}else{
tempdf <- x %>%
filter(sample_size == ss) %>%
filter(n_pop == np) %>%
filter(binGxE == bc) %>%
group_by("name" = GxEanova_check,sample_size,n_pop,binGxE)%>%
summarise(n = n())
}
if(nrow(tempdf)==0){next}
fn1 = tempdf$n[tempdf$name == "False Negative"]
fp1 = tempdf$n[tempdf$name == "False Positive"]
tn1 = tempdf$n[tempdf$name == "True Negative"]
tp1 = tempdf$n[tempdf$name == "True Positive"]
if(is.empty(fn1) == TRUE){fn = 0}else{fn = fn1}
if(is.empty(fp1) == TRUE){fp = 0}else{fp = fp1}
if(is.empty(tn1) == TRUE){tn = 0}else{tn = tn1}
if(is.empty(tp1) == TRUE){tp = 0}else{tp = tp1}
fnr = fn/(fn+tp)
output1 = data.frame(sample_size = ss,
n_pop = np,
bin = bc,
fnr = fnr,
power = 1-fnr)
output = rbind(output, output1)
}
}
}
}
}
return(output)
}
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))}
library(ggplot2)
library(grid)
library(readr)
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(viridis)
# Load Data compiled on cluster
setwd("~/Documents/GitHub/CnGV/CnGV/results/Sim_12.15.20/")
start_df = read.csv("Power_output_results.csv")
# Split up into two experimental designs
dat_csv = start_df %>% filter(env_scenario == 1) %>% droplevels() # Reciprocal Transplant
dat_dub = start_df %>% filter(env_scenario == 2) %>% droplevels() # Common Garden
filter(dat_csv, row == 13662)
filter(dat_csv, row == 21997)
filter(dat_dub, row == 21997)
filter(dat_dub, row == 25827)
filter(dat_csv, row == 9279)
# Molly's age at metamorphosis data
mm = read.csv("~/Desktop/Work/DataSets/Tadpole Plasticity_2017/mortality2017.csv")
mm = mm[-which(is.na(mm$Jul_metamorph)),] # Include only those that metamorphosed
mm$age = mm$Jul_metamorph-mm$Jul_hatch # Calculate age at MM
# Molly's age at metamorphosis data
mm = read.csv("~/Desktop/Work/DataSets/Tadpole Plasticity_2017/mortality2017.csv")
# Molly's age at metamorphosis data
mm = read.csv("~/Desktop/Work/DataSets/Tadpole Plasticity_2017/mortality2017.csv")
# Molly's age at metamorphosis data
mm = read.csv("~/Desktop/Work/DataSets/Tadpole Plasticity_2017/mortality2017.csv")
mm = mm[-which(is.na(mm$Jul_metamorph)),] # Include only those that metamorphosed
mm$age = mm$Jul_metamorph-mm$Jul_hatch # Calculate age at MM
# Rename variables for analysis
mm1 = mm %>%
filter(Pop != "BELL") %>% # Exclude bellamy bc missing data at 6ppt
filter(tad %in% c(0,6)) %>% # Only use 0, 6ppt
droplevels()
mm1$gen_factor = paste0("G_",as.numeric(mm1$Pop))
mm1$exp_env_factor = paste0("E_",as.numeric(as.factor(mm1$tad)))
mm1
paste0("G_",as.numeric(mm1$Pop))
mm1$Pop
as.numeric(unlist(mm1$Pop))
as.numeric(as.factor(mm1$Pop))
mm1$gen_factor = paste0("G_",as.numeric(as.factor(mm1$Pop)))
mm1$exp_env_factor = paste0("E_",as.numeric(as.factor(mm1$tad)))
mm1$nat_env_factor = NULL
for(i in 1:nrow(mm1)){
if(mm1$Pop[i] == "BOD" | mm1$Pop[i] == "CSI" |mm1$Pop[i] == "LH" |mm1$Pop[i] == "DQ"){ mm1$nat_env_factor[i] = "E_2"
}else{ mm1$nat_env_factor[i] = "E_1"}
}
ma = data.frame("data_type" = rep("raw", nrow(mm1)),
"gen_factor" = mm1$gen_factor,
"exp_env_factor" = factor(mm1$exp_env_factor),
"nat_env_factor" = factor(mm1$nat_env_factor), # E_2 = coastal; E_1 = inland
"phen_data"= mm1$age)
ma
length(unique(ma$gen_factor))
length(unique(ma$exp_env_factor))
ma %>% group_by(gen_factor, exp_env_factor)%>%summarise(n = n())
ma %>% group_by(gen_factor)%>%summarise(n = n())
w = ma %>% group_by(gen_factor)%>%summarise(n = n())
mean(w$n)
7*2*27
5*261
10*261
350*.1
35*260
50*.1
50*250
50*175
26.1.1
26*1.1
26*1.15
2021-1968
dat_csv[dat_csv$row == 25827,]
dat_dub[dat_dub$row == 25827,]
dat_csv[dat_csv$row == 13662,]
