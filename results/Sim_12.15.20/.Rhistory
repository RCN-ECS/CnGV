"2_8_FRT" = "Reciprocal Transplant \n 2 Samples \n 8 Genotypes \n 8 Environments",
"8_4_FRT" = "Reciprocal Transplant \n 8 Samples \n 4 Genotypes \n 4 Environments")
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
covbo$grp
covbo
covbo = rbind(dub_cov,covFPR)
covbo$grp
covbo$grp = paste(covbo$sample_size,covbo$n_pop,covbo$scenario,sep="_")
covbo$grp
bigcov = c("4_8_FRT","16_4_FRT","8_16_CG","16_8_CG")
covbo = filter(covbo, grp %in% bigcov)
covbo
label128 = c("4_8_FRT" = "Reciprocal Transplant \n 4 Samples \n 8 Genotypes \n 8 Environments",
"16_4_FRT"= "Reciprocal Transplant \n 16 Samples \n 4 Genotypes \n 4 Environments",
"8_16_CG"= "Common Garden \n 8 Samples \n 16 Genotypes \n 2 Environments",
"16_8_CG"="Common Garden \n 16 Samples \n 8 Genotypes \n 2 Environments")
dub_cov$scenario = rep("CG",nrow(dub_cov))
covFPR$scenario = rep("FRT",nrow(covFPR))
covbo = rbind(dub_cov,covFPR)
covbo$grp = paste(covbo$sample_size,covbo$n_pop,covbo$scenario,sep="_")
#covbo = filter(covbo,totsamp == 128)
covbo = filter(covbo, grp %in% bigcov)
covbo[is.nan(covbo)] <- 0
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "GxE_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Civ_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
## False Positive BarPlot for Covariance
label128 = c("4_16_CG" = "Common Garden \n 4 Samples \n 16 Genotypes \n 2 Environments",
"8_8_CG" = "Common Garden \n 8 Samples \n 8 Genotypes \n 2 Environments",
"16_4_CG" = "Common Garden \n 16 Samples \n 4 Genotypes \n 2 Environments",
"2_8_FRT" = "Reciprocal Transplant \n 2 Samples \n 8 Genotypes \n 8 Environments",
"8_4_FRT" = "Reciprocal Transplant \n 8 Samples \n 4 Genotypes \n 4 Environments")
dub_cov$scenario = rep("CG",nrow(dub_cov))
covFPR$scenario = rep("FRT",nrow(covFPR))
covbo = rbind(dub_cov,covFPR)
covbo$grp = paste(covbo$sample_size,covbo$n_pop,covbo$scenario,sep="_")
covbo = filter(covbo,totsamp == 128)
#covbo = filter(covbo, grp %in% bigcov)
covbo[is.nan(covbo)] <- 0
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(grp),-rate), y = rate, group = ID,colour = factor(ID),fill = factor(ID)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, #labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,#labels  = label128)+
labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = label128)+#labels= c("GxE_Anova" = "ANOVA", "GxE_Perm" = "Permutation"))+
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,labels  = label128)
falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE,labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))
label128
ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)
ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels = labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
## False Positive BarPlot for Covariance
label128 = c("4_16_CG" = "Common Garden \n 4 Samples \n 16 Genotypes \n 2 Environments",
"8_8_CG" = "Common Garden \n 8 Samples \n 8 Genotypes \n 2 Environments",
"16_4_CG" = "Common Garden \n 16 Samples \n 4 Genotypes \n 2 Environments",
"2_8_FRT" = "Reciprocal Transplant \n 2 Samples \n 8 Genotypes \n 8 Environments",
"8_4_FRT" = "Reciprocal Transplant \n 8 Samples \n 4 Genotypes \n 4 Environments")
dub_cov$scenario = rep("CG",nrow(dub_cov))
covFPR$scenario = rep("FRT",nrow(covFPR))
covbo = rbind(dub_cov,covFPR)
covbo$grp = paste(covbo$sample_size,covbo$n_pop,covbo$scenario,sep="_")
#covbo = filter(covbo,totsamp == 128)
covbo = filter(covbo, grp %in% bigcov)
covbo[is.nan(covbo)] <- 0
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
## False Positive BarPlot for Covariance
label128 = c("4_16_CG" = "Common Garden \n 4 Samples \n 16 Genotypes \n 2 Environments",
"8_8_CG" = "Common Garden \n 8 Samples \n 8 Genotypes \n 2 Environments",
"16_4_CG" = "Common Garden \n 16 Samples \n 4 Genotypes \n 2 Environments",
"2_8_FRT" = "Reciprocal Transplant \n 2 Samples \n 8 Genotypes \n 8 Environments",
"8_4_FRT" = "Reciprocal Transplant \n 8 Samples \n 4 Genotypes \n 4 Environments")
dub_cov$scenario = rep("CG",nrow(dub_cov))
covFPR$scenario = rep("FRT",nrow(covFPR))
covbo = rbind(dub_cov,covFPR)
covbo$grp = paste(covbo$sample_size,covbo$n_pop,covbo$scenario,sep="_")
#covbo = filter(covbo,totsamp == 128)
covbo = filter(covbo, grp %in% bigcov)
covbo[is.nan(covbo)] <- 0
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-rate), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-totsamp), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
label128 = c("4_8_FRT" = "Reciprocal Transplant \n 4 Samples \n 8 Genotypes \n 8 Environments",
"16_4_FRT"= "Reciprocal Transplant \n 16 Samples \n 4 Genotypes \n 4 Environments",
"8_16_CG"= "Common Garden \n 8 Samples \n 16 Genotypes \n 2 Environments",
"16_8_CG"="Common Garden \n 16 Samples \n 8 Genotypes \n 2 Environments")
(falsePosCov = ggplot(covbo, aes(x = reorder(factor(ID),-totsamp), y = rate, group = grp,colour = factor(grp),fill = factor(grp)))+
geom_bar(position = "dodge", stat = "identity") +
geom_hline(aes(yintercept = 0.05),linetype = "dashed")+
ylab("False Positive Rate") + xlab("")+
ggtitle("False Positive Rates")+
labs(colour = "Experimental Design",fill = "Experimental Design")+
scale_fill_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_colour_viridis(discrete = TRUE, labels  = label128)+
#labels = c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+
scale_x_discrete(labels= c("Cov_Boot" = "Bootstrap", "Cov_Perm" = "Permutation"))+ #label128)+#
theme(axis.text.x = element_text(colour = "black",size = 22)) +
theme_classic(base_family = "Times",base_size = 14) +
theme(axis.text = element_text(colour = "black")))
dat_csv$sig = NULL
for(i in 1:nrow(dat_csv)){ # Use only if one or the other is significant
if(dat_csv$GxE_emm_pvalue[i] <= 0.05 | dat_csv$covariance_lwrCI[i] > 0 & dat_csv$covariance_uprCI[i] > 0){dat_csv$sig[i] = TRUE
}else if(dat_csv$GxE_emm_pvalue[i] <= 0.05 | dat_csv$covariance_lwrCI[i] < 0 & dat_csv$covariance_uprCI[i] < 0){dat_csv$sig[i] = TRUE
}else{dat_csv$sig[i]=FALSE}
}
dat_dub$sig = NULL
for(i in 1:nrow(dat_dub)){ # Use only if one or the other is significant
if(dat_dub$GxE_emm_pvalue[i] <= 0.05 | dat_dub$covariance_lwrCI[i] > 0 & dat_dub$covariance_uprCI[i] > 0){dat_dub$sig[i] = TRUE
}else if(dat_dub$GxE_emm_pvalue[i] <= 0.05 | dat_dub$covariance_lwrCI[i] < 0 & dat_dub$covariance_uprCI[i] < 0){dat_dub$sig[i] = TRUE
}else{dat_dub$sig[i]=FALSE}
}
dat_csv$covtick <- NULL
for(i in 1:nrow(dat_csv)){
if(dat_csv$covariance_lwrCI[i] > 0 & dat_csv$covariance_uprCI[i] > 0){dat_csv$covtick[i]=1
}else if(dat_csv$covariance_lwrCI[i] < 0 & dat_csv$covariance_uprCI[i] < 0){dat_csv$covtick[i]=1
}else{dat_csv$covtick[i]=0}
}
dat_dub$covtick <- NULL
for(i in 1:nrow(dat_dub)){
if(dat_dub$covariance_lwrCI[i] > 0 & dat_dub$covariance_uprCI[i] > 0){dat_dub$covtick[i]=1
}else if(dat_dub$covariance_lwrCI[i] < 0 & dat_dub$covariance_uprCI[i] < 0){dat_dub$covtick[i]=1
}else{dat_dub$covtick[i]=0}
}
sigGxE = dat_csv %>%
filter(sig ==TRUE) %>% # filter out false positives as potential solution to weed out messiness.
filter(true_GxE_emm != 0) %>%
filter(true_cov != 0) %>%
filter(Covconfintboot != "false positive") %>%
filter(GxEconfintperm != "false positive")
sigGxE2 = dat_dub %>%
filter(sig ==TRUE) %>% # filter out false positives as potential solution to weed out messiness.
filter(true_GxE_emm != 0) %>%
filter(true_cov != 0) %>%
filter(Covconfintboot != "false positive") %>%
filter(GxEconfintperm != "false positive")
(bin = ggplot(sigGxE, aes(x = true_GxE_emm, y = covtick))+
geom_smooth(method = "glm",method.args = list(family = "binomial"),se = T,colour = "black") +
geom_point()+
xlab(expression(""*bar(Delta)*""["GxE"]*" of population"))+ylab(expression("Proportion significant Cov"["GE"]" of population"))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(bin = ggplot(sigGxE, aes(x = true_GxE_emm, y = covtick))+
geom_smooth(method = "glm",method.args = list(family = "binomial"),se = T,colour = "black") +
geom_point()+
xlab(expression(""*bar(Delta)*""["GxE"]*" of population"))+ylab(expression("Proportion significant Cov"["GE"]*" of population"))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(bin = ggplot(sigGxE, aes(x = true_GxE_emm, y = covtick))+
geom_smooth(method = "glm",method.args = list(family = "binomial"),se = T,colour = "black") +
geom_point()+
xlab(expression(""*bar(Delta)*""["GxE"]*" of population"))+ylab(expression("Proportion significant Cov"["GE"]))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(lin = ggplot(filter(sigGxE,replicate ==1), aes(x = true_GxE_emm, y = abs(true_cov)))+
geom_point(alpha = 0.15)+
geom_smooth(method = "glm", colour = "black", size = 1.5)+
xlab(expression("Actual "*bar(Delta)*""["GxE"]*" of population"))+ylab(expression("|Cov"["GE"]*" | of population"))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("Full Reciprocal Transplant Design")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(lin = ggplot(filter(sigGxE,replicate ==1), aes(x = true_GxE_emm, y = abs(true_cov)))+
geom_point(alpha = 0.15)+
geom_smooth(method = "glm", colour = "black", size = 1.5)+
xlab(expression(bar(Delta)*""["GxE"]*" of population"))+ylab(expression("|Cov"["GE"]*" | of population"))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("Full Reciprocal Transplant Design")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(bin2 = ggplot(sigGxE2, aes(x = true_GxE_emm, y = covtick))+
geom_smooth(method = "glm",method.args = list(family = "binomial"),se = T,colour = "black") +
geom_point()+
xlab(expression(bar(Delta)*""["GxE"]*" of population"))+ylab(expression("Proportion significant Cov"["GE"]))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
(lin2 = ggplot(filter(sigGxE2, replicate == 1), aes(x = true_GxE_emm, y = abs(true_cov)))+
geom_point(alpha = 0.15)+
geom_smooth(method = "glm", colour = "black", size = 1.5)+
xlab(expression(bar(Delta)*""["GxE"]*" of population"))+ylab(expression("| Cov"["GE"]*" | of population"))+
theme_bw(base_size = 18, base_family = "Times")+
theme(axis.text.x = element_text(colour = "black"))+
theme(axis.text.y = element_text(colour = "black"))+
ggtitle("Paired Common Garden Design")+
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 2)))
grid.arrange(lin, bin, lin2, bin2, ncol = 2)
#####################################
##          Parameter Coverage      ##
######################################
dat_csv$ss_chr <- NA
dat_csv = dat_csv %>% mutate(ss_chr = ifelse(sample_size == 2, "2 Samples",
ifelse(sample_size == 4, "4 Samples",
ifelse(sample_size == 8, "8 Samples", "16 Samples"))))
dat_csv$np_chr <- NA
dat_csv = dat_csv %>% mutate(np_chr = ifelse(n_pop == 2, "2 Genotypes",
ifelse(n_pop == 4, "4 Genotypes","8 Genotypes")))
dat_csv$np_f = factor(dat_csv$np_chr, levels=c("2 Genotypes","4 Genotypes","8 Genotypes"))
dat_csv$ss_f = factor(dat_csv$ss_chr, levels=c("2 Samples","4 Samples","8 Samples","16 Samples"))
dat_dub$ss_chr <- NA
dat_dub = dat_dub %>% mutate(ss_chr = ifelse(sample_size == 2, "2 Samples",
ifelse(sample_size == 4, "4 Samples",
ifelse(sample_size == 8, "8 Samples", "16 Samples"))))
dat_dub$np_chr <- NA
dat_dub = dat_dub %>% mutate(np_chr = ifelse(n_pop == 2, "2 Genotypes",
ifelse(n_pop == 4, "4 Genotypes",
ifelse(n_pop == 8, "8 Genotypes","16 Genotypes"))))
dat_dub$np_f = factor(dat_dub$np_chr, levels=c("2 Genotypes","4 Genotypes","8 Genotypes","16 Genotypes"))
dat_dub$ss_f = factor(dat_dub$ss_chr, levels=c("2 Samples","4 Samples","8 Samples","16 Samples"))
dat_dub = filter(dat_dub, n_pop != 2)
(hexy2 = ggplot(dat_dub, aes(x = true_cov, y = true_GxE_emm)) +
geom_hex()+
ylab(expression(""*bar(Delta)*""["GxE"]*" of population"))+xlab(expression("Cov"["GE"]*" of population"))+
ggtitle("Paired Common Garden") + facet_grid(ss_f~np_f) +
theme_classic(base_family = "Times"))
(hexy = ggplot(dat_csv, aes(x = true_cov, y = true_GxE_emm)) +
geom_hex()+
ylab(expression(""*bar(Delta)*""["GxE"]*" of population"))+xlab(expression("Cov"["GE"]*" of population"))+
ggtitle("Full Reciprocal Transplant") + facet_grid(ss_f~np_f) +
#facet_grid(sample_size~n_pop)+
theme_classic(base_family = "Times"))
dat_dub$ss_chr <- NA
grid.arrange(hexy,hexy2)
dat_csv$meancoverror = abs(dat_csv$cov_means_uprCI - dat_csv$cov_means_lwrCI)
dat_dub$meancoverror = abs(dat_dub$cov_means_uprCI - dat_dub$cov_means_lwrCI)
dat_csv$coverror = abs(dat_csv$covariance_uprCI - dat_csv$covariance_lwrCI)
dat_dub$coverror = abs(dat_dub$covariance_uprCI - dat_dub$covariance_lwrCI)
dat_csv$meangxeerror = dat_csv$GxE_means_uprCI - dat_csv$GxE_means_lwrCI
dat_dub$meangxeerror = dat_dub$GxE_means_uprCI - dat_dub$GxE_means_lwrCI
dat_csv$gxeerror = dat_csv$GxE_emm_uprCI - dat_csv$GxE_emm_lwrCI
dat_dub$gxeerror = dat_dub$GxE_emm_uprCI - dat_dub$GxE_emm_lwrCI
# Covariance
dat_csv_2 = filter(dat_csv, sample_size != 2)
(covpopcheck = ggplot(dat_csv_2,aes(x = abs(true_cov), y = abs(covariance)))+
geom_point(aes(colour = factor(n_pop)))+ylab(expression("Cov"["GE"]*": Group Means"))+xlab(expression("Cov"["GE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
ggtitle("Full reciprocal transplant design")+
theme(axis.text = element_text(colour = "black")))
(covmeancheck = ggplot(dat_csv,aes(x = covariance, y = cov_means))+
geom_point()+ylab(expression("Cov"["GE"]*": Group Means"))+xlab(expression("Cov"["GE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
ggtitle("Full Reciprocal Transplant Design")+
theme(axis.text = element_text(colour = "black")))
(coverrorcheck = ggplot(dat_csv, aes(x = coverror,y = meancoverror)) +
geom_point(alpha = 0.5)+ylab(expression("Length of Cov"["GE"]*"CI: Group Means"))+xlab(expression("Length of Cov"["GE"]*"CI: Raw data "))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
ggtitle("")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(covmeancheck,coverrorcheck_lwr, coverrorcheck_upr)
# Lwr CI
(coverrorcheck_lwr = ggplot(dat_csv, aes(x = covariance_lwrCI, y = cov_means_lwrCI)) +
geom_point(alpha = 0.5)+ylab(expression("Lower limit 95% CI for Cov"["GE"]*": Group Means"))+xlab(expression("Lower Limit of 95% CI for Cov"["GE"]*": Raw data "))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
# Upr CI
(coverrorcheck_upr = ggplot(dat_csv, aes(x = covariance_uprCI, y = cov_means_uprCI  )) +
geom_point(alpha = 0.5)+ylab(expression("Upper limit 95% CI for Cov"["GE"]*": Group Means"))+xlab(expression("Upper Limit of 95% CI for Cov"["GE"]*": Raw data "))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(covmeancheck,coverrorcheck_lwr, coverrorcheck_upr)
grid.arrange(covmeancheck, coverrorcheck_lwr, coverrorcheck_upr)
(covmeancheck2 = ggplot(dat_dub,aes(x = covariance, y = cov_means))+
geom_point()+ylab(expression("Cov"["GE"]*": Group Means"))+xlab(expression("Cov"["GE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
ggtitle("Paired Common Garden Design")+
theme(axis.text = element_text(colour = "black")))
(coverrorcheck2 = ggplot(dat_dub, aes(x = coverror,y = meancoverror)) +
geom_point(alpha = 0.5)+ylab(expression("Length of Cov"["GE"]*"CI: Group Means"))+xlab(expression("Length of Cov"["GE"]*"CI: Raw data "))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
ggtitle("")+
theme(axis.text = element_text(colour = "black")))
# GxE
(gxemeancheck = ggplot(dat_csv,aes(x = true_GxE_emm, y = true_GxE_means))+
geom_point()+ylab(expression(bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression(bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
(gxeerrorcheck = ggplot(dat_csv, aes(x = gxeerror,y = meangxeerror)) +
geom_point(alpha = 0.5)+ylab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression("Length of 95% CI for"*bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(covmeancheck, coverrorcheck_lwr, coverrorcheck_upr)
grid.arrange(covmeancheck, coverrorcheck_lwr, coverrorcheck_upr,gxeerrorcheck, gxeerrorcheck_lwr, gxeerrorcheck_upr, ncol = 2)
(gxeerrorcheck_lwr = ggplot(dat_csv, aes(x = GxE_emm_lwrCI,y = GxE_means_lwrCI)) +
geom_point(alpha = 0.5)+ylab(expression("Lower limit of 95% CI for"*bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression("Lower limit of 95% CI for"*bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
(gxeerrorcheck_upr = ggplot(dat_csv, aes(x = GxE_emm_uprCI,y = GxE_means_uprCI)) +
geom_point(alpha = 0.5)+ylab(expression("Upper limit of 95% CI for"*bar(Delta)*""["GxE"]*": Group Means"))+xlab(expression("Upper limit of 95% CI for"*bar(Delta)*""["GxE"]*": Raw data"))+
geom_abline(slope = 1, intercept = 0,size = 1, colour = "red")+
theme_classic(base_size = 20, base_family = "Times")+
theme(axis.text = element_text(colour = "black")))
grid.arrange(covmeancheck, coverrorcheck_lwr, coverrorcheck_upr,gxeerrorcheck, gxeerrorcheck_lwr, gxeerrorcheck_upr, ncol = 2)
grid.arrange(covmeancheck, coverrorcheck_lwr, coverrorcheck_upr, gxemeancheck, gxeerrorcheck_lwr, gxeerrorcheck_upr, ncol = 2)
grid.arrange(covmeancheck, gxemeancheck, coverrorcheck_lwr, gxeerrorcheck_lwr, coverrorcheck_upr,  gxeerrorcheck_upr, ncol = 2)
