AA_fitness=1+2*s)
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
# Equation 5.1
p <- seq(0,1,0.01)
h <- 0 # additive
s=0.01
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
h = 1 #dominant
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
h = -1 # recessive
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
h = 1.5 # overdominant
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(0,1)
abline(h=1)
abline(h=0)
h = 2 # overdominant
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
h = 5 # overdominant
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
s=0
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
s=0.001
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
s=0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
s=-0.1
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
s=0.1
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
h = -5 # underdominant
s=0.1
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
h = -2 # underdominant
s=0.1
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
h = 5 # overdominant
data.frame(aa_fitness=1,
Aa_fitness= (1+s*(1+h)),
AA_fitness=(1+2*s))
delta_p <- s*p*(1-p)*(1+h*(1-2*p))
plot(p, delta_p)
abline(h=0)
beta1 = 1 # the amount the phenotype changes across 1 value of the environment (i.e., the slope). This is essentially the amount/degree of phenotypic plasticity that is the same across genotypes.
n_genotypes = 15 # the number of genotypes collected from different locations
beta2 = -1 # the amount the phenotype changes from one genotype to the next. This is essitially the increase intercept from one genotype to the next.
# Check #1
(E_real <- 1:n_genotypes)
(G_real <- (0:(n_genotypes-1))*beta2)
(cov_GE = cov(E_real, G_real))  # true cov for raw data
(cor_GE = cor(E_real, G_real))
# old approximation
(cov_GE_approx = beta1 * beta2)
# Generate data
n = 15 # sample size
## Create levels of genotypes and environments ####
G = rep(1:n_genotypes, each=n*n_genotypes) # '0' n times, '1' n times
E = rep(1:n_environments,times=n*n_genotypes) # '0'x50, '1'x50, '0'x50, '1'x50
set.seed(97)
e = rnorm(n*n_genotypes, 0, sd=0.01) # Random noise, with standard deviation of 1
n_environments = n_genotypes # the number of common garden environments that the genotypes are grown in. Basically, genotype[i] orginates from environment[i]. This matching between genotypes and environment is important for the the cov(G,E) calculation. Here, we only consider the case of the complete reciprocal transplant experiment.
## Create levels of genotypes and environments ####
G = rep(1:n_genotypes, each=n*n_genotypes) # '0' n times, '1' n times
E = rep(1:n_environments,times=n*n_genotypes) # '0'x50, '1'x50, '0'x50, '1'x50
set.seed(97)
e = rnorm(n*n_genotypes, 0, sd=0.01) # Random noise, with standard deviation of 1
## Create interaction effect for each level of both factors ####
# In this case we assume the GxE interactions are a
# normally distributed random variable with a mean of 0
# As the sd increases, so does the GxE among treatments
int <- 0#rnorm(n_genotypes * n_environments, 0, sd=10)
## Create interaction effect for each level of both factors ####
# In this case we assume the GxE interactions are a
# normally distributed random variable with a mean of 0
# As the sd increases, so does the GxE among treatments
int <- n_genotypes#rnorm(n_genotypes * n_environments, 0, sd=10)
## Create interaction effect for each level of both factors ####
# In this case we assume the GxE interactions are a
# normally distributed random variable with a mean of 0
# As the sd increases, so does the GxE among treatments
int <- rnorm(n_genotypes * n_environments, 0, sd=n_genotypes)
# this sd determines the amount of GxE
int_df <- data.frame(expand.grid(G=1:n_genotypes, E=1:n_environments),
int)
### Create the model dataframe ####
model_df <- data.frame(G, E, e)
model_df <- merge(model_df, int_df)
model_df <- model_df[order(model_df$G, model_df$E),]
dim(model_df)
head(model_df, 30)
# Generate phenotype data using the regression equation ####
phenotype = beta1*model_df$E + beta2*model_df$G  + model_df$e + model_df$int
model_df$phenotype = phenotype
head(model_df)
(E_means <- tapply(phenotype, model_df$E, mean))
(G_means <- tapply(phenotype, model_df$G, mean))
cov(E_means, G_means)
cor(E_means, G_means)
# but the issue is we standardize the phenotype. So what happens when we do that?
phenotype_stn = (phenotype-mean(phenotype))/sd(phenotype)
(E_means_stn <- tapply(phenotype_stn, model_df$E, mean))
(G_means_stn <- tapply(phenotype_stn, model_df$G, mean))
head(model_df)
model_df$phenotype_stn  <- phenotype_stn
model <- aov(phenotype_stn ~ G*E, model_df)
summary(model)
summary(model)[1]
summary(model)[[1]]
w2_GxE = (summary(model)[[1]][3,2] - #(SS_effect -
(summary(model)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model)[[1]][,2]) + # (SS_total+
(summary(model)[[1]][4,3])) # MS_error)
w2_GxE
( w2_GxE_2 = (summary(model)[[1]][3,2] - #(SS_effect -
(summary(model)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model)[[1]][,2]) + # (SS_total+
(summary(model)[[1]][4,3])) # MS_error))
)
model2 <- aov(lm(phenotype_stn ~ G*E), model_df)
( w2_GxE_2 = (summary(model2)[[1]][3,2] - #(SS_effect -
(summary(model2)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model2)[[1]][,2]) + # (SS_total+
(summary(model2)[[1]][4,3])) # MS_error))
)
str(model_df)
model_df$G <- as.factor(model_df$G)
model_df$E <- as.factor(model_df$E)
model_df$env_stn <- mean(model_df$E)-sd(model_df$E)
beta1 = 1 # the amount the phenotype changes across 1 value of the environment (i.e., the slope). This is essentially the amount/degree of phenotypic plasticity that is the same across genotypes.
n_genotypes = 15 # the number of genotypes collected from different locations
beta2 = -1 # the amount the phenotype changes from one genotype to the next. This is essitially the increase intercept from one genotype to the next.
# Check #1
(E_real <- 1:n_genotypes)
(G_real <- (0:(n_genotypes-1))*beta2)
(cov_GE = cov(E_real, G_real))  # true cov for raw data
(cor_GE = cor(E_real, G_real))
# old approximation
(cov_GE_approx = beta1 * beta2)
# will be correlated with the magnitude of cov(G,E)
# SANITY CHECK
# IF WE DO A RECIPROCAL TRANSPLANT WITH 10 Locations and
# 15 samples per location, we should get:
# 10 genotypes x 10 locations = 100 treatments x 15 samples = 1500 measurements
# The old code had a bug, in that it was only generating the correct data
# for the 2 population case, and not for cases with more than 2 populations
# Generate data
n = 15 # sample size
n_environments = n_genotypes # the number of common garden environments that the genotypes are grown in. Basically, genotype[i] orginates from environment[i]. This matching between genotypes and environment is important for the the cov(G,E) calculation. Here, we only consider the case of the complete reciprocal transplant experiment.
## Create levels of genotypes and environments ####
G = rep(1:n_genotypes, each=n*n_genotypes) # '0' n times, '1' n times
E = rep(1:n_environments,times=n*n_genotypes) # '0'x50, '1'x50, '0'x50, '1'x50
set.seed(97)
e = rnorm(n*n_genotypes, 0, sd=0.01) # Random noise, with standard deviation of 1
#e = 0 # EVALUATION
## Create interaction effect for each level of both factors ####
# In this case we assume the GxE interactions are a
# normally distributed random variable with a mean of 0
# As the sd increases, so does the GxE among treatments
int <- rnorm(n_genotypes * n_environments, 0, sd=n_genotypes)
#int <- 0 # EVALUATION
# this sd determines the amount of GxE
int_df <- data.frame(expand.grid(G=1:n_genotypes, E=1:n_environments),
int)
### Create the model dataframe ####
model_df <- data.frame(G, E, e)
model_df <- merge(model_df, int_df)
model_df <- model_df[order(model_df$G, model_df$E),]
dim(model_df)
head(model_df, 30)
# Generate phenotype data using the regression equation ####
phenotype = beta1*model_df$E + beta2*model_df$G  + model_df$e + model_df$int
model_df$phenotype = phenotype
head(model_df)
(E_means <- tapply(phenotype, model_df$E, mean))
(G_means <- tapply(phenotype, model_df$G, mean))
cov(E_means, G_means)
cor(E_means, G_means)
# this should match the "true cov for raw data" I put above
# but the issue is we standardize the phenotype. So what happens when we do that?
phenotype_stn = (phenotype-mean(phenotype))/sd(phenotype)
(E_means_stn <- tapply(phenotype_stn, model_df$E, mean))
(G_means_stn <- tapply(phenotype_stn, model_df$G, mean))
plot(E_means_stn, G_means_stn)
cov(E_means_stn, G_means_stn)
cor(E_means_stn, G_means_stn)
plot(phenotype~model_df$E, col=model_df$G+1)
head(model_df)
model_df$phenotype_stn  <- phenotype_stn
model_df$env_stn <- mean(model_df$E)-sd(model_df$E)
model_df$G_fact <- as.factor(model_df$G)
model_df$E_fact <- as.factor(model_df$E)
str(model_df)
# Explore anova with G and E as continuous
model <- aov(phenotype_stn ~ G*E, model_df)
summary(model)[[1]]
w2_GxE = (summary(model)[[1]][3,2] - #(SS_effect -
(summary(model)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model)[[1]][,2]) + # (SS_total+
(summary(model)[[1]][4,3])) # MS_error)
head(model_df)
#################################
# same as last case but with standardized E
model2 <- aov(lm(phenotype_stn ~ G*env_stn), model_df)
#################################
# same as last case but with standardized E
model3 <- aov(lm(phenotype_stn ~ G*env_stn), model_df)
#################################
# same as last case but with lm()
model2 <- aov(lm(phenotype_stn ~ G*E, model_df))
( w2_GxE_2 = (summary(model2)[[1]][3,2] - #(SS_effect -
(summary(model2)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model2)[[1]][,2]) + # (SS_total+
(summary(model2)[[1]][4,3])) # MS_error))
)
#################################
# same as last case but with standardized E
model3 <- aov(lm(phenotype_stn ~ G*env_stn, model_df))
( w2_GxE_3 = (summary(model3)[[1]][3,2] - #(SS_effect -
(summary(model3)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model3)[[1]][,2]) + # (SS_total+
(summary(model3)[[1]][4,3])) # MS_error))
)
summary(model3)
model_df$env_stn <- (model_df$E-mean(model_df$E))/(sd(model_df$E))
model_df$G_fact <- as.factor(model_df$G)
model_df$E_fact <- as.factor(model_df$E)
str(model_df)
# Explore anova with G and E as continuous
model <- aov(phenotype_stn ~ G*E, model_df)
summary(model)[[1]]
w2_GxE = (summary(model)[[1]][3,2] - #(SS_effect -
(summary(model)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model)[[1]][,2]) + # (SS_total+
(summary(model)[[1]][4,3])) # MS_error)
#################################
# same as last case but with lm()
model2 <- aov(lm(phenotype_stn ~ G*E, model_df))
( w2_GxE_2 = (summary(model2)[[1]][3,2] - #(SS_effect -
(summary(model2)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model2)[[1]][,2]) + # (SS_total+
(summary(model2)[[1]][4,3])) # MS_error))
)
#################################
# same as last case but with standardized E
model3 <- aov(lm(phenotype_stn ~ G*env_stn, model_df))
( w2_GxE_3 = (summary(model3)[[1]][3,2] - #(SS_effect -
(summary(model3)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model3)[[1]][,2]) + # (SS_total+
(summary(model3)[[1]][4,3])) # MS_error))
)
#################################
# same as last case but with factors
model3 <- aov(lm(phenotype_stn ~ G_fact*E_fact, model_df))
( w2_GxE_3 = (summary(model3)[[1]][3,2] - #(SS_effect -
(summary(model3)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model3)[[1]][,2]) + # (SS_total+
(summary(model3)[[1]][4,3])) # MS_error))
)
#################################
# same as last case but with factors
model4 <- aov(lm(phenotype_stn ~ G_fact*E_fact, model_df))
summary(model4)
plot(phenotype~model_df$E, col=model_df$G+1)
# same as last case but with G as factor and E as a covariate
model3 <- aov(lm(phenotype_stn ~ G_fact*env_stn, model_df))
# same as last case but with G as factor and E as a covariate
model4 <- aov(lm(phenotype_stn ~ G_fact*env_stn, model_df))
# same as last case but with G as factor and E as a covariate
model4 <- aov(lm(phenotype_stn ~ G_fact*env_stn, model_df))
( w2_GxE_4 = (summary(model4)[[1]][3,2] - #(SS_effect -
(summary(model4)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model4)[[1]][,2]) + # (SS_total+
(summary(model4)[[1]][4,3])) # MS_error))
)
# same as last case but with G as factor and E as a covariate
model4 <- aov(lm(phenotype_stn ~ G_fact*E, model_df))
( w2_GxE_4 = (summary(model4)[[1]][3,2] - #(SS_effect -
(summary(model4)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model4)[[1]][,2]) + # (SS_total+
(summary(model4)[[1]][4,3])) # MS_error))
)
# same as last case but with G as factor and E as a STANDARDIZED covariate
model4 <- aov(lm(phenotype_stn ~ G_fact*env_stn, model_df))
( w2_GxE_4 = (summary(model4)[[1]][3,2] - #(SS_effect -
(summary(model4)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model4)[[1]][,2]) + # (SS_total+
(summary(model4)[[1]][4,3])) # MS_error))
)
summary(model)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
# same as last case but with G as factor and E as a covariate
model5 <- aov(lm(phenotype_stn ~ G_fact*E, model_df))
summary(model5)
( w2_GxE_5 = (summary(model5)[[1]][3,2] - #(SS_effect -
(summary(model5)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model5)[[1]][,2]) + # (SS_total+
(summary(model5)[[1]][4,3])) # MS_error))
)
#################################
# same as last case but with factors
model4 <- aov(lm(phenotype_stn ~ G_fact*E_fact, model_df))
summary(model4)
( w2_GxE_4 = (summary(model4)[[1]][3,2] - #(SS_effect -
(summary(model4)[[1]][3,1]*summary(model)[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(model4)[[1]][,2]) + # (SS_total+
(summary(model4)[[1]][4,3])) # MS_error))
)
head(model_df)
(mean[model_df$E=="1" & model_df$G=="1"])) # GxE
(GxE_emm <- abs(mean(model_df$phenotype_stn) - # Overall mean
(mean(model_df$phenotype_stn[model_df$E=="1"]))+ # E
#################################
# same as last case but with lm()
model2 <- aov(lm(phenotype_stn ~ G*E, model_df))
(GxE_emm <- abs(mean(model_df$phenotype_stn) - # Overall mean
(mean(model_df$phenotype_stn[model_df$E=="1"]))+ # E
)))
(GxE_emm <- abs(mean(model_df$phenotype_stn) - # Overall mean
(mean(model_df$phenotype_stn[model_df$E=="1"]))+ # E
#################################
# same as last case but with lm()
model2 <- aov(lm(phenotype_stn ~ G*E, model_df))
(GxE_emm <- abs(mean(model_df$phenotype_stn)) - # Overall mean
mean(model_df$phenotype_stn[model_df$G=="1"]))- # G
(mean(model_df$phenotype_stn[model_df$E=="1"]))+ # E
(mean(model_df$phenotype_stn[model_df$E=="1" & model_df$G=="1"])) # GxE
)
)))
mean(model_df$phenotype_stn[model_df$G=="1"])
mean(model_df$phenotype_stn)
abs(mean(model_df$phenotype_stn))
(mean(model_df$phenotype_stn[model_df$E=="1"]))
(mean(model_df$phenotype_stn[model_df$E=="1" & model_df$G=="1"])
))
(GxE_emm <- abs(mean(model_df$phenotype_stn)) - # Overall mean
mean(model_df$phenotype_stn[model_df$G=="1"])- # G
mean(model_df$phenotype_stn[model_df$E=="1"])+ # E
mean(model_df$phenotype_stn[model_df$E=="1" & model_df$G=="1"]) # GxE
)
(GxE_emm <- abs(mean(model_df$phenotype_stn) - # Overall mean
mean(model_df$phenotype_stn[model_df$G=="1"])- # G
mean(model_df$phenotype_stn[model_df$E=="1"])+ # E
mean(model_df$phenotype_stn[model_df$E=="1" & model_df$G=="1"])) # GxE
)
setwd("/Users/lotterhos/Documents/GitHub/CnGV/notebook/20200528_data")
# Load packages
library("emmeans")
library("lme4")
library("rlist")
library("dplyr")
# .csv sent via Slack
model_df <- read.csv("model_df.csv")
result <- read.csv("result.csb") # FOR REFERENCE: original parameter set and results from full code
# Anova
test_temp <- lm(phen_corrected ~ exp_env_factor * gen_factor, data = model_df)
# Estimated Marginal Means
emm_options(msg.interaction = FALSE)
emm_E = as.data.frame(emmeans(test_temp,"exp_env_factor"))
emm_G = as.data.frame(emmeans(test_temp, "gen_factor"))
emm_GxE = as.data.frame(emmeans(test_temp, ~ exp_env_factor*gen_factor))
# Magnitude of GxE -- EMMs
GxE_emm <- abs(emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_1"] - # GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_1"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_1"] + # phenotype of jth Environment
mean(model_df$phen_corrected)) # Overall mean phenotype # GxE_emm = 0.05991497
GxE_emm
# Magnitude of GxE -- Omega^2
w2_GxE = (summary(aov(test_temp))[[1]][3,2] - #(SS_effect -
(summary(aov(test_temp))[[1]][3,1]*summary(aov(test_temp))[[1]][4,3])) / #(Df_effect * MS_error))/
(sum(summary(aov(test_temp))[[1]][,2]) + # (SS_total+
(summary(aov(test_temp))[[1]][4,3])) # MS_error) #  = 0.807962
w2_GxE
emm_E
emm_G
emm_GxE
mean(model_df$phen_corrected)
head(model_df)
mean(model_df$phen_corrected[exp_env_factor=="E_1"])
mean(model_df$phen_corrected[model_df$exp_env_factor=="E_1"])
emm_E
mean(model_df$phen_corrected[model_df$exp_env_factor=="G_1"])
mean(model_df$phen_corrected[model_df$gen_factor=="G_1"])
emm_G
mean(model_df$phen_corrected[model_df$gen_factor=="G_1" & model_df$gen_factor=="E_1"])
mean(model_df$phen_corrected[model_df$gen_factor=="G_1" & model_df$exp_env_factor=="E_1"])
emm_GxE
emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_1"] -
emm_G$emmean[emm_G$gen_factor == "G_1"] -
emm_E$emmean[emm_E$exp_env_factor == "E_1"] + # phenotype of jth Environment
mean(model_df$phen_corrected)
emm_E
# Magnitude of GxE -- EMMs
GxE_emm <- abs(emm_GxE$emmean[emm_GxE$gen_factor == "G_2" & emm_GxE$exp_env_factor == "E_2"] - # GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_2"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_2"] + # phenotype of jth Environment
mean(model_df$phen_corrected)) # Overall mean phenotype # GxE_emm = 0.05991497
GxE_emm
# Magnitude of GxE -- EMMs
GxE_emm <- abs(emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_2"] - # GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_1"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_2"] + # phenotype of jth Environment
mean(model_df$phen_corrected)) # Overall mean phenotype # GxE_emm = 0.05991497
GxE_emm
GxE_emm <- abs(mean(model_df$phen_corrected) -
# GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_1"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_2"] + # phenotype of jth Environment
emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_2"]
)
GxE_emm
## Should not matter on levels of G's and E's
## But it does...
GxE_emm <- abs(emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_1"] - # GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_1"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_1"] + # phenotype of jth Environment
mean(model_df$phen_corrected)) # Overall mean phenotype # GxE_emm = 0.05991497
GxE_emm <- abs(mean(model_df$phen_corrected) -
# GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_1"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_2"] + # phenotype of jth Environment
emm_GxE$emmean[emm_GxE$gen_factor == "G_1" & emm_GxE$exp_env_factor == "E_2"]
)
GxE_emm
summary(aov(test_temp))
GxE_emm <- abs(mean(model_df$phen_corrected) -
# GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == "G_2"] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == "E_2"] + # phenotype of jth Environment
emm_GxE$emmean[emm_GxE$gen_factor == "G_2" & emm_GxE$exp_env_factor == "E_2"]
)
GxE_emm
G_levels <- levels(model_df$gen_factor)
E_levels <- levels(model_df$exp_env_factor)
allGE <- c()
for (i in 1:nlevels(model_df$gen_factor)){
for (j in 1:nlevels(model_df$exp_env_factor)){
G_levels <- levels(model_df$gen_factor)
E_levels <- levels(model_df$exp_env_factor)
GxE_emm <- abs(mean(model_df$phen_corrected) -
# GxE (Phenotype of ith genotype in jth environment)
emm_G$emmean[emm_G$gen_factor == G_levels[i]] - # phenotype of ith Genotype
emm_E$emmean[emm_E$exp_env_factor == E_levels[j]] + # phenotype of jth Environment
emm_GxE$emmean[emm_GxE$gen_factor == G_levels[i] & emm_GxE$exp_env_factor == E_levels[j]]
)
allGE <- c(allGE, GxE_emm)
}
}
hist(allGE)
mean(allGE)
w2_GxE
# Magnitude of GxE -- Eta^2
eta2_GxE = summary(aov(test_temp))[[1]][3,2]/sum(summary(aov(test_temp))[[1]][,2]) # = 0.8260634
eta2_GxE
