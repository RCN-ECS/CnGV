# note final column is log-transformed
m1 <- lm(Abundance~Size+PAH+SO2, dat=mrdat)
m2 <- lm(Abundance~Size+PAH, dat=mrdat)
m3 <- lm(Abundance~Size+SO2, dat=mrdat)
summary(m1)
summary(m2)
summary(m3)
AIC(m1)
AIC(m2)
AIC(m3)
set.seed(103)
x3 <- round(x2*0.8 + rnorm(n,0,2)) # correlated with x2
set.seed(104)
y <- round((0.1*x + 500 + -5*x2 + rnorm(10, 0, 30)),2)
mrdat <- data.frame(y, x, x2, x3)
par(mfrow=c(3,1), mar=c(4,4,1,1))
plot(y ~ x, ylab="Abundance", xlab="Pond size")
plot(y ~ x2, ylab="Abundance", xlab="PAH")
plot(y ~ x2, ylab="Abundance", xlab="SO2")
mrdat$logx <- log(x)
m1 <- lm(y~x+x2+x3)
m2 <- lm(y~log(x)+x2+x3)
par(mfrow=c(1,2))
qqnorm(m1$residuals, main="Model 1")
qqline(m1$residuals)
qqnorm(m2$residuals, main="Model 2")
qqline(m2$residuals)
head(mrdat)
names(mrdat) <- c("Abundance", "Size_raw", "PAH", "SO2", "Size")
# note final column is log-transformed
m1 <- lm(Abundance~Size+PAH+SO2, dat=mrdat)
m2 <- lm(Abundance~Size+PAH, dat=mrdat)
m3 <- lm(Abundance~Size+SO2, dat=mrdat)
summary(m1)
summary(m2)
summary(m3)
AIC(m1)
AIC(m2)
AIC(m3)
s2 <- summary(lm(PAH~Size+SO3))
s2$r.squared
s2 <- summary(lm(PAH~Size+SO3, dat=mrdat))
s2$r.squared
s2 <- summary(lm(PAH~Size+SO2, dat=mrdat))
s2$r.squared
(VIF_s2 <- (1/(1-s2$r.squared)))
s1 <- summary(lm(SO2~Size+PAH, dat=mrdat))
(VIF_s1 <- (1/(1-s1$r.squared)))
s1 <- summary(m1)
s2<- summary(m2)
s3 <- summary(m3)
s1$call
s1[[1]]
s1[[3]]
str(s1)
s1[[4]]
round(s1[[4]],2)
round(s1[[4]],3)
s2$call
round(s2[[4]],3)
s3$call
round(s3[[4]],3)
y <- round((0.1*x + 500 + -5*x2 + rnorm(10, 0, 50)),2)
mrdat <- data.frame(y, x, x2, x3)
par(mfrow=c(3,1), mar=c(4,4,1,1))
plot(y ~ x, ylab="Abundance", xlab="Pond size")
plot(y ~ x2, ylab="Abundance", xlab="PAH")
plot(y ~ x2, ylab="Abundance", xlab="SO2")
mrdat$logx <- log(x)
m1 <- lm(y~x+x2+x3)
m2 <- lm(y~log(x)+x2+x3)
par(mfrow=c(1,2))
qqnorm(m1$residuals, main="Model 1")
qqline(m1$residuals)
qqnorm(m2$residuals, main="Model 2")
qqline(m2$residuals)
head(mrdat)
names(mrdat) <- c("Abundance", "Size_raw", "PAH", "SO2", "Size")
# note final column is log-transformed
m1 <- lm(Abundance~Size+PAH+SO2, dat=mrdat)
m2 <- lm(Abundance~Size+PAH, dat=mrdat)
m3 <- lm(Abundance~Size+SO2, dat=mrdat)
s1 <- summary(m1)
s2<- summary(m2)
s3 <- summary(m3)
s1$call
round(s1[[4]],3)
s2$call
round(s2[[4]],3)
s3$call
round(s3[[4]],3)
mxP <- summary(lm(PAH~Size+SO2, dat=mrdat))
mxP$call
mxP$r.squared
print("The R^2 for the formula," mxP$call, " = ", round(mxP$r.squared,2)
mxP <- summary(lm(PAH~Size+SO2, dat=mrdat))
print("The R^2 for the formula," mxP$call, " = ", round(mxP$r.squared,2)
print("The R^2 for the formula,", mxP$call, " = ", round(mxP$r.squared,2)
)
print(c("The R^2 for the formula,", mxP$call, " = ", round(mxP$r.squared,2)))
print(c(unlist("The R^2 for the formula,", mxP$call, " = ", round(mxP$r.squared,2))))
print(unlist(c("The R^2 for the formula,", mxP$call, " = ", round(mxP$r.squared,2))))
print(unlist(c("The R^2 for the formula,", unlist(mxP$call), " is ", unlist(round(mxP$r.squared,2)))))
c("The R^2 for the formula,", unlist(mxP$call), " is ", unlist(round(mxP$r.squared,2))))
c("The R^2 for the formula,", unlist(mxP$call), " is ", unlist(round(mxP$r.squared,2))
)
unlist(mxP$call)
print(unlist(c("The R^2 for the formula,", as.character(mxP$call), " is ", unlist(round(mxP$r.squared,2)))))
print(unlist(c("The R^2 for the above formula is ", unlist(round(mxP$r.squared,2)))))
(VIF_s2 <- (1/(1-mxP$r.squared)))
(VIF_PAH <- (1/(1-mxP$r.squared)))
mxS <- summary(lm(PAH~Size+SO2, dat=mrdat))
mxS$call
print(unlist(c("The R^2 for the above formula is ", unlist(round(mxS$r.squared,2)))))
(VIF_PAH <- (1/(1-round(mxS$r.squared, 2))))
(VIF_PAH <- (1/(1-round(mxP$r.squared,2))))
AIC(m1)
AIC(m2)
AIC(m3)
x3 <- round(x2*0.8 + rnorm(n,0,3)) # correlated with x2
set.seed(104)
y <- round((0.1*x + 500 + -5*x2 + rnorm(10, 0, 50)),2)
mrdat <- data.frame(y, x, x2, x3)
par(mfrow=c(3,1), mar=c(4,4,1,1))
plot(y ~ x, ylab="Abundance", xlab="Pond size")
plot(y ~ x2, ylab="Abundance", xlab="PAH")
plot(y ~ x2, ylab="Abundance", xlab="SO2")
mrdat$logx <- log(x)
plot(y ~ x3, ylab="Abundance", xlab="SO2")
plot(y ~ x, ylab="Abundance", xlab="Pond size")
plot(y ~ x2, ylab="Abundance", xlab="PAH")
plot(y ~ x3, ylab="Abundance", xlab="SO2")
m1 <- lm(y~x+x2+x3)
m2 <- lm(y~log(x)+x2+x3)
par(mfrow=c(1,2))
qqnorm(m1$residuals, main="Model 1")
qqline(m1$residuals)
qqnorm(m2$residuals, main="Model 2")
qqline(m2$residuals)
head(mrdat)
names(mrdat) <- c("Abundance", "Size_raw", "PAH", "SO2", "Size")
# note final column is log-transformed
m1 <- lm(Abundance~Size+PAH+SO2, dat=mrdat)
m2 <- lm(Abundance~Size+PAH, dat=mrdat)
m3 <- lm(Abundance~Size+SO2, dat=mrdat)
s1 <- summary(m1)
s2<- summary(m2)
s3 <- summary(m3)
s1$call
round(s1[[4]],3)
s2$call
round(s2[[4]],3)
s3$call
round(s3[[4]],3)
mxP <- summary(lm(PAH~Size+SO2, dat=mrdat))
mxP$call
print(unlist(c("The R^2 for the above formula is ", unlist(round(mxP$r.squared,2)))))
mxS <- summary(lm(PAH~Size+SO2, dat=mrdat))
mxS$call
print(unlist(c("The R^2 for the above formula is ", unlist(round(mxS$r.squared,2)))))
(VIF_PAH <- (1/(1-round(mxP$r.squared,2))))
(VIF_SO2<- (1/(1-round(mxS$r.squared, 2))))
AIC(m1)
AIC(m2)
AIC(m3)
c(s1$r.squared, s1$adj.r.squared, -logLik(s1), AIC(m1))
c(s1$r.squared, s1$adj.r.squared, -logLik(m1), AIC(m1))
m1$call
round(c(s1$r.squared, s1$adj.r.squared, -logLik(m1), AIC(m1)),2)
round(data.frame(r.squared = s1$r.squared,
adjusted.r.squared = s1$adj.r.squared,
likelihood = -logLik(m1),
AIC = AIC(m1)),2)
m2$call
round(data.frame(r.squared = s2$r.squared,
adjusted.r.squared = s2$adj.r.squared,
likelihood = -logLik(m2),
AIC = AIC(m2)),2)
round(data.frame(r.squared = s3$r.squared,
adjusted.r.squared = s3$adj.r.squared,
likelihood = -logLik(m3),
AIC = AIC(m3)),2)
round(data.frame(r.squared = s1$r.squared,
adjusted.r.squared = s1$adj.r.squared,
likelihood = logLik(m1),
AIC = AIC(m1)),2)
m2$call
m1$call
round(data.frame(r.squared = s1$r.squared,
adjusted.r.squared = s1$adj.r.squared,
likelihood = logLik(m1),
AIC = AIC(m1)),2)
m2$call
round(data.frame(r.squared = s2$r.squared,
adjusted.r.squared = s2$adj.r.squared,
likelihood = logLik(m2),
AIC = AIC(m2)),2)
m3$call
round(data.frame(r.squared = s3$r.squared,
adjusted.r.squared = s3$adj.r.squared,
likelihood = logLik(m3),
AIC = AIC(m3)),2)
n=40
set.seed(101)
x <- round(sort(rnorm(n, 2300, 500)),1)
set.seed(102)
x2 <- round(rnorm(n, 53, 10), 1)
set.seed(103)
x3 <- round(x2*0.8 + rnorm(n,0,3)) # correlated with x2
set.seed(104)
y <- round((0.1*x + 500 + -5*x2 + rnorm(10, 0, 50)),2)
mrdat <- data.frame(y, x, x2, x3)
par(mfrow=c(3,1), mar=c(4,4,1,1))
plot(y ~ x, ylab="Abundance", xlab="Pond size")
plot(y ~ x2, ylab="Abundance", xlab="PAH")
plot(y ~ x3, ylab="Abundance", xlab="SO2")
mrdat$logx <- log(x)
m1 <- lm(y~x+x2+x3)
m2 <- lm(y~log(x)+x2+x3)
par(mfrow=c(1,2))
qqnorm(m1$residuals, main="Model 1")
qqline(m1$residuals)
qqnorm(m2$residuals, main="Model 2")
qqline(m2$residuals)
alpha1 = 2.1 # overall intercept for level 1 of factor A
beta1 = 0.45 # slope for level 1 of factor A
alpha2 = 2.1 # overall intercept for level 2 of factor A
beta2 = 0.7 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
set.seed(99)
X1 <- rnorm(n, 10, 2)
set.seed(101)
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98)
X2 <- rnorm(n, 10, 2)
set.seed(102)
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)))
legend(10, 4, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)))
legend(10, 4, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)))
legend(10, 4, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
beta2 = 0.01 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)))
legend(10, 4, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)), xlim=c(0, max(Temp)))
legend(0, 8, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
TukeyHSD(m1)
head(data)
sum(data$Temp[data$Diseased=="Diseased"])
dis.dat <- data$Temp[data$Diseased=="Diseased"]
dis.dat <- data$Growth[data$Diseased=="Diseased"]
dis.dat <- data[data$Diseased=="Diseased",]
dis.dat <- data[data$Diseased=="Diseased",]
cov_TG_dis <- round(cov(dis.dat$Temp, dis.dat$Growth), 2)
print(c( "Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis)
print(c( "Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis))
cov_TG_dis <- round(cov(dis.dat$Temp, dis.dat$Growth), 2)
print(c( "Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis))
printf(c( "Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis))
paste(c( "Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis))
paste("Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis)
sd_T_dis <- round(sd(dis.dat$Temp), 2)
sd_G_dis <- round(sd(dis.dat$Growth), 2)
paste("Standard deviation in Growth Diseased Trees:", sd_G_dis)
dis.dat <- data[data$Diseased=="Normal",]
dis.dat <- data[data$Diseased=="Diseased",]
cov_TG_dis <- round(cov(dis.dat$Temp, dis.dat$Growth), 2)
sd_T_dis <- round(sd(dis.dat$Temp), 2)
sd_G_dis <- round(sd(dis.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis)
paste("Standard deviation in Temperature for Diseased Trees:", sd_T_dis)
paste("Standard deviation in Growth for Diseased Trees:", sd_G_dis)
dis.dat <- data[data$Diseased=="Normal",]
cov_TG_ <- round(cov(norm.dat$Temp, norm.dat$Growth), 2)
sd_T_norm <- round(sd(norm.dat$Temp), 2)
sd_G_norm <- round(sd(norm.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Normal Trees:", cov_TG_norm)
paste("Standard deviation in Temperature for Normal Trees:", sd_T_norm)
dis.dat <- data[data$Diseased=="Diseased",]
cov_TG_dis <- round(cov(dis.dat$Temp, dis.dat$Growth), 2)
sd_T_dis <- round(sd(dis.dat$Temp), 2)
sd_G_dis <- round(sd(dis.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis)
paste("Standard deviation in Temperature for Diseased Trees:", sd_T_dis)
paste("Standard deviation in Growth for Diseased Trees:", sd_G_dis)
dis.dat <- data[data$Diseased=="Normal",]
cov_TG_ <- round(cov(norm.dat$Temp, norm.dat$Growth), 2)
norm.dat <- data[data$Diseased=="Normal",]
cov_TG_ <- round(cov(norm.dat$Temp, norm.dat$Growth), 2)
sd_T_norm <- round(sd(norm.dat$Temp), 2)
sd_G_norm <- round(sd(norm.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Normal Trees:", cov_TG_norm)
paste("Standard deviation in Temperature for Normal Trees:", sd_T_norm)
paste("Standard deviation in Growth for Normal Trees:", sd_G_norm)
cov_TG_norm <- round(cov(norm.dat$Temp, norm.dat$Growth), 2)
sd_T_norm <- round(sd(norm.dat$Temp), 2)
sd_G_norm <- round(sd(norm.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Normal Trees:", cov_TG_norm)
paste("Standard deviation in Temperature for Normal Trees:", sd_T_norm)
paste("Standard deviation in Growth for Normal Trees:", sd_G_norm)
# Slope for Diseased trees:
cov_TG_dis/sd_T_dis^2
# Slope for Diseased trees (2 points, -1 point if they forget to square the standard deviation)
cov_TG_dis/sd_T_dis^2
# Slope for Normal trees (2 points, -1 point if they forget to square the standard deviation)
cov_TG_norm/sd_T_norm^2
summary(lm(Growth~Temp, data=dis.dat))
alpha1 = 2.1 # overall intercept for level 1 of factor A
beta1 = 0.01 # slope for level 1 of factor A
alpha2 = 2.1 # overall intercept for level 2 of factor A
beta2 = 0.45 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)), xlim=c(0, max(Temp)))
legend(0, 8, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
beta1 = -0.01 # slope for level 1 of factor A
alpha2 = 2.1 # overall intercept for level 2 of factor A
beta2 = 0.45 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)), xlim=c(0, max(Temp)))
legend(0, 8, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
beta2 = 0.35 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)), xlim=c(0, max(Temp)))
legend(0, 8, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
legend(0, 6, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
beta1 = -0.1 # slope for level 1 of factor A
alpha2 = 2.1 # overall intercept for level 2 of factor A
beta2 = 0.35 # slope for level 2 of factor A
# Generate data
n=10
# Generate your data using the regression equation
seedn = 19
set.seed(99+seedn )
X1 <- rnorm(n, 10, 2)
set.seed(101+seedn )
y1 = alpha1 + beta1*X1 +   rnorm(n, 0, sd=0.5)
set.seed(98+seedn )
X2 <- rnorm(n, 10, 2)
set.seed(102+seedn )
y2 = alpha2 + beta2*X2 +   rnorm(n, 0, sd=0.5)
# Join the variables in a data frame
data = rbind(data.frame(A="Diseased", X=X1, Y=y1), data.frame(A="Normal", X=X2, Y=y2))
#head(data)
names(data) = c("Diseased", "Temp", "Growth")
par(mfrow=c(1,1))
plot(Growth~Temp, pch=as.numeric(Diseased),  data=data,
bty="l", ylim=c(0,max(Growth)), xlim=c(0, max(Temp)))
legend(0, 6, levels(data$Disease), pch=1:2)
m1 <- lm(Growth~Temp*Diseased, data=data)
summary(aov(m1))
head(data)
dis.dat <- data[data$Diseased=="Diseased",]
cov_TG_dis <- round(cov(dis.dat$Temp, dis.dat$Growth), 2)
sd_T_dis <- round(sd(dis.dat$Temp), 2)
sd_G_dis <- round(sd(dis.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Diseased Trees:", cov_TG_dis)
paste("Standard deviation in Temperature for Diseased Trees:", sd_T_dis)
paste("Standard deviation in Growth for Diseased Trees:", sd_G_dis)
norm.dat <- data[data$Diseased=="Normal",]
cov_TG_norm <- round(cov(norm.dat$Temp, norm.dat$Growth), 2)
sd_T_norm <- round(sd(norm.dat$Temp), 2)
sd_G_norm <- round(sd(norm.dat$Growth), 2)
paste("Covariance between Temperature and Growth for Normal Trees:", cov_TG_norm)
paste("Standard deviation in Temperature for Normal Trees:", sd_T_norm)
paste("Standard deviation in Growth for Normal Trees:", sd_G_norm)
# Slope for Diseased trees (2 points, -1 point if they forget to square the standard deviation)
cov_TG_dis/sd_T_dis^2
# Slope for Normal trees (2 points, -1 point if they forget to square the standard deviation)
cov_TG_norm/sd_T_norm^2
summary(lm(Growth~Temp, dat=data)$slope
)
summary(lm(Growth~Temp, dat=data))$coeff[2]
summary(lm(Growth~Temp, dat=data))$coef[2]
paste("Overall slope for temperature for all trees:", round(summary(lm(Growth~Temp, dat=data))$coef[2]))
paste("Overall slope for temperature for all trees:", round(summary(lm(Growth~Temp, dat=data))$coef[2], 2))
paste("Covariance between Temperature and Growth for Normal Trees:", cov_TG_norm)
paste("Standard deviation in Temperature for Normal Trees:", sd_T_norm)
paste("Standard deviation in Growth for Normal Trees:", sd_G_norm)
summ[[1]]
summ[[1]][4,1]
m1 <- lm(y~x+x2+x3)
m2 <- lm(y~log(x)+x2+x3)
par(mfrow=c(1,2))
qqnorm(m1$residuals, main="Model 1")
qqline(m1$residuals)
qqnorm(m2$residuals, main="Model 2")
qqline(m2$residuals)
##############################
##############################
paste(s1$call, round(s1[[4]],3))
\newpage
mxS <- summary(lm(SO2~Size+PAH, dat=mrdat))
mxS <- summary(lm(SO2~Size+PAH, dat=mrdat))
print(mxP$call)
print(c("The R2 is", mxP$call, 2))
paste(c("The R2 is", mxP$call, 2))
paste("The R2 is", mxP$call, 2)
unlist(print(c("The R2 is", mxP$call, 2)))
