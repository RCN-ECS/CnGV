mean(diff)
(diff-mean(diff))^2
round((diff-mean(diff))^2,2)
sqrt(sum(round((diff-mean(diff))^2,2))/(11))
d2012 <- read.csv("https://raw.githubusercontent.com/tgouhier/biostats/main/lab2_dataset1.csv")
d2012
Tpop <- 30
R <- 1.1
Z <- 0
w <- 0.6
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R - 0.59
t <- 0:50
plot(t, fit)
Z <- 0:50
w <- 0.6
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R - 0.59
t <- 0:50
plot(t, fit)
w <- 0.3
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R - 0.59
t <- 0:50
plot(t, fit)
plot(t, fit, ylim=c(0,1))
Tpop <- 30
R <- 1.1
Z <- 0:50
w <- 0.6
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R - 0.59
t <- 0:50
plot(t, fit, ylim=c(0,1))
plot(t, fit)
fit[fit<0] <- 0
t <- 0:50
plot(t, fit)
w <- 3.6
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit)
plot(t, fit, type="l")
fit <- (1- ((Tpop- Z)/w)^2)*1.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit, type="l")
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(1.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit, type="l")
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit, type="l")
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit, type="l", ylab="Reproductive output")
Tpop <- 30
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
t <- 0:50
plot(t, fit, type="l", ylab="Reproductive output")
plot(Z, fit, type="l", ylab="Reproductive output")
Tpop <- 30
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature")
Tpop <- 25
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature")
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty=0)
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="n")
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l")
col <- c("grey25", "grey50", "grey75", "grey90")
for (Tpop in 26:30){
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
points(Z, fit, col=)
}
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l")
col <- c("grey25", "grey50", "grey75", "grey90")
for (Tpop in 26:30){
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
points(Z, fit, col=col)
}
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l")
col <- c("grey25", "grey50", "grey75", "grey90")
for (Tpop in 26:30){
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
points(Z, fit, col=col, type="l")
}
col <- c("grey25", "grey50", "grey75", "grey90")
TpopV <- c(26.5, 28, 29.5, 32)
for (i in 1:4){
Tpop <- TpopV[i]
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
points(Z, fit, col=col[i], type="l")
}
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l")
col <- c("grey25", "grey50", "grey75", "grey90")
TpopV <- c(26.5, 28, 29.5, 32)
for (i in 1:4){
Tpop <- TpopV[i]
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- 0
points(Z, fit, col=col[i], type="l")
}
Tpop <- 25
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- NA
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l")
col <- c("grey25", "grey50", "grey75", "grey90")
Tpop <- 25
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- NA
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l", ylim=c(0,6))
col <- c("grey25", "grey50", "grey75", "grey90")
TpopV <- c(26.5, 28, 29.5, 32)
for (i in 1:4){
Tpop <- TpopV[i]
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- NA
points(Z, fit, col=col[i], type="l")
}
Tpop <- 25
R <- 1.1
Z <- seq(0,50,0.01)
w <- 10
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- NA
plot(Z, fit, type="l",
ylab="Reproductive output",
xlab="Temperature",
bty="l", ylim=c(0,6))
col <- c("grey25", "grey50", "grey75", "grey90")
TpopV <- c(26.5, 28, 29.5, 32)
for (i in 1:4){
Tpop <- TpopV[i]
fit <- (1- ((Tpop- Z)/w)^2)*0.59*exp(0.0633*Tpop) + R
fit[fit<0] <- NA
points(Z, fit, col=col[i], type="l", lwd=i)
}
Q    <- 3
g11  <- c(41, 43, 50)
g12  <- c(51, 43, 53, 54, 46)
g13  <- c(45, 55, 56, 60, 58, 62, 62)
g21  <- c(56, 47, 45, 46, 49)
g22  <- c(58, 54, 49, 61, 52, 62)
g23  <- c(59, 55, 68, 63)
g31  <- c(43, 56, 48, 46, 47)
g32  <- c(59, 46, 58, 54)
g33  <- c(55, 69, 63, 56, 62, 67)
dfMD <- data.frame(IV1=factor(rep(1:P, c(3+5+7, 5+6+4, 5+4+6))),
IV2=factor(rep(rep(1:Q, P), c(3,5,7, 5,6,4, 5,4,6))),
DV =c(g11, g12, g13, g21, g22, g23, g31, g32, g33))
P    <- 3
Q    <- 3
g11  <- c(41, 43, 50)
g12  <- c(51, 43, 53, 54, 46)
g13  <- c(45, 55, 56, 60, 58, 62, 62)
g21  <- c(56, 47, 45, 46, 49)
g22  <- c(58, 54, 49, 61, 52, 62)
g23  <- c(59, 55, 68, 63)
g31  <- c(43, 56, 48, 46, 47)
g32  <- c(59, 46, 58, 54)
g33  <- c(55, 69, 63, 56, 62, 67)
dfMD <- data.frame(IV1=factor(rep(1:P, c(3+5+7, 5+6+4, 5+4+6))),
IV2=factor(rep(rep(1:Q, P), c(3,5,7, 5,6,4, 5,4,6))),
DV =c(g11, g12, g13, g21, g22, g23, g31, g32, g33))
dfMD
xtabs(~ IV1 + IV2, data=dfMD)
boxplot(DV ~ IV1 + IV2)
boxplot(DV ~ IV1 + IV2, data=dfMD)
xtabs(~ IV1 * IV2, data=dfMD)
par(mfrow=c(3,1))
boxplot(DV ~ IV1 + IV2, data=dfMD)
par(mfrow=c(3,1))
boxplot(DV ~ IV1 *IV2, data=dfMD)
par(mfrow=c(1,3))
boxplot(DV ~ IV1 *IV2, data=dfMD)
par(mfrow=c(1,3))
boxplot(DV ~ IV1 *IV2, data=dfMD)
par(mfrow=c(1,3))
boxplot(DV ~ IV1 *IV2, data=dfMD)
boxplot(DV ~ IV1 , data=dfMD)
boxplot(DV ~ IV2 , data=dfMD)
qf(0.05,2, 16607)
qf(0.95,2, 16607)
qf(0.95,4, 16607)
qf(0.95,8, 16607)
MST=-1.28
M=3.06
HS=6.60
O=13.90
bar <- c(MST,M,HS,O)
barplot(bar,names.arg = c("MST","M","HS","O"))
barplot(bar,names.arg = c("MST","M","HS","O"), ylab="Score Math Abstract - Score Normal Abstract")
barplot(bar,names.arg = c("MST","M","HS","O"), ylab="Score Math Abstract - Score Normal Abstract", ylim=c(-4, 15))
barplot(bar,names.arg = c("MST","M","HS","O"), ylab="Score Math Abstract - Score Normal Abstract", ylim=c(-5, 15))
MST-M
MST-HS
MST-O
M-HS
M-O
HS-O
A = c("GreenLizards", "BrownLizards")
B = c("GreenLeaves", "BrownLeaves")
A_mean = c(8, 8)
B_mean = c(6, 9)
n = 14
int = c(0,0,0,3)
A_x = rep(A, each = n*length(B))
B_x = rep(B, times = n*length(A))
A_means = rep (A_mean, each = n*length(B))
B_means = rep (B_mean, times = n*length(A))
int_means = rep(int, each = n)
set.seed(23)
e = rnorm(length(A_x), 0, sd=1.5)
model_df <- data.frame(A_x, B_x, e, A_means, B_means)
model_df <- model_df[order(model_df$A_x, model_df$B_x),]
model_df$int_means = int_means
model_df$Y = (model_df$A_means + model_df$B_means)/2 + model_df$int_means + model_df$e
names(model_df)[1:2] <- c("LizardColor", "LeafColor")
means = tapply(model_df$Y, list(model_df$LizardColor,model_df$LeafColor ), mean)
means
round(means,2)
par(mar=c(12,4,0.1,0.1))
boxplot(model_df$Y ~ model_df$LizardColor * model_df$LeafColor,
xlab="", ylab = "Fitness", las=2)
mod <- aov(Y~LizardColor*LeafColor, data=model_df)
m = summary(mod)
m[[1]][,1:2]
# The F-stat is the MS for that row divided by the MS_error (3 points)
# Answer depends on how you round it
(SS <- round(m[[1]][,2],3))
(df <- m[[1]][,1])
(MS <- round(SS/df,3))
(F_val <- round(MS[1:3]/MS[4],3))
MS[1:3]
MS[1:3]/MS[4]
MS[1]/MS[2]
MS[1]/MS[3]
0.001/MS[3]
0.00008
df
df_num = 1:4
df_denom = m[[1]][,1][4]
crit = matrix(c(qf(0.95, df_num, (df_denom-1)),
qf(0.95, df_num, (df_denom)),
qf(0.95, df_num, (df_denom))
), byrow=TRUE,
ncol=length(df_num))
# critical value for main effects and interaction
colnames(crit) = df_num
rownames(crit)= (df_denom-1):(df_denom+1)
round(crit,4)
F
# Answer
# All three hypotheses have 1 df in the numerator and 1 df in the denominator, and the following critical value:
qf(0.95, 1, (df_denom))
qchisq(0.95,1)
makeplot <- function(a, letr, main){
plot(0:1, c(a[1:2]), ylim=c(-2,2),
xaxt ="n", type="l", col="blue", xlab="",
ylab="Stnd. phenotype", bty="l",
main=main, lwd=2, xlim=c(0,1.5))
mtext("EA", side=1, line=1, adj=0, col="blue")
points(0:1, c(a[3:4]),  type="l", col="green", xlab="", lwd=1, lty=2)
mtext("EB", side=1, line=1, adj=0.66, col="green")
D_H <- a[1] - a[4]
(D_EA <- a[1]-a[2])
(D_EB <- a[3]-a[4])
(D_E <- mean(c(D_EA, D_EB)))
text(1.1,a[1],"D_H", cex=0.8)
arrows(1.2,a[4], 1.2, a[1], length=0.1)
text(1.4, a[1], "D_E", cex=0.8)
arrows(1.3, mean(c(a[2], a[4])),
1.3, mean(c(a[2], a[4]))+D_E,
length=0.1)
PL <- D_E/D_H
text(1,-1.9,paste("PL =",PL),adj=1)
text(0,2, letr)
return(data.frame(D_H=D_H, D_EA = D_EA,
D_EB=D_EB,D_E=D_E, PL=PL))
}
# Case 1
case1 <- rep(NA, 4)
names(case1) <- c("PAEA", "PAEB", "PBEA", "PBEB")
a <- 0
case1[1:4] <- c(a,a+1,a-1+0.01,a+0.01)
case1
# Case 1
case1 <- rep(NA, 4)
names(case1) <- c("PAEA", "PAEB", "PBEA", "PBEB")
a <- 0
case1[1:4] <- c(a,a+1,a-1+0.01,a+0.01)
case1
```{r}
# Case 2
case2 <- rep(NA, 4)
names(case2) <- names(case1)
a <- 0
case2[1:4] <- c(a,a+1,a-1-0.01,a-0.01)
case2
# Case 2
case2 <- rep(NA, 4)
names(case2) <- names(case1)
a <- 0
case2[1:4] <- c(a,a+1,a-1-0.01,a-0.01)
case2
The following plot shows how Case 1 and Case 2 have almost equivalent reaction norms, and therefore similar plastic responses to the environment and similar amount of countergradient variation.
Case 1 has `PL=100` (implying XXX) while Case 2 has `PL= -100` (implying XXX).
par(mfrow=c(2,1))
makeplot(case1, "", "Case 1")
makeplot(case2, "", "Case 2")
case3 <- rep(NA, 4)
names(case3) <- names(case1)
case3[1:4] <- c(1,-1,0,0)
case3
case4 <- rep(NA, 4)
names(case4) <- names(case1)
case4[1:4] <- c(-1.2, +1.4, +0.5,  -0.3)
case4
par(mfrow=c(2,1))
makeplot(case3, "", "Case 3")
makeplot(case4, "", "Case 4")
case5 <- rep(NA, 4)
names(case5) <- names(case1)
case6 <- case5
case5[1:4] <- c(-0.1, 0.1, -0.15, 0.15)
case6[1:4] <- c(-1, 1, -1.05, 1.05)
par(mfrow=c(2,1))
makeplot(case5, "", "Case 5")
makeplot(case6, "", "Case 6")
makeplot(c(-0.1, 0.1, -0.1, 0.1))
makeplot(c(-0.1, 0.1, -0.1, 0.1), "","Case0")
# Case 1
case1 <- rep(NA, 4)
names(case1) <- c("PAEA", "PAEB", "PBEA", "PBEB")
a <- 0
case1[1:4] <- c(a,a+1,a-1+0.01,a+0.01)
case1
# Case 2
case2 <- rep(NA, 4)
names(case2) <- names(case1)
a <- 0
case2[1:4] <- c(a,a+1,a-1-0.01,a-0.01)
case2
par(mfrow=c(2,1))
makeplot(case1, "", "Case 1")
makeplot(case2, "", "Case 2")
case3 <- rep(NA, 4)
names(case3) <- names(case1)
case3[1:4] <- c(1,-1,0,0)
case3
case4 <- rep(NA, 4)
names(case4) <- names(case1)
case4[1:4] <- c(-1.2, +1.4, +0.5,  -0.3)
case4
par(mfrow=c(2,1))
makeplot(case3, "", "Case 3")
makeplot(case4, "", "Case 4")
case5 <- rep(NA, 4)
names(case5) <- names(case1)
case6 <- case5
case5[1:4] <- c(-0.1, 0.1, -0.15, 0.15)
case6[1:4] <- c(-1, 1, -1.05, 1.05)
par(mfrow=c(2,1))
makeplot(case5, "", "Case 5")
makeplot(case6, "", "Case 6")
final_1 <- rbind(case1, case2, case3, case4, case5, case6)
# Make plot
#pdf("")
par(mfrow=c(3,2), mar=c(3,1,1,1), oma=c(0,3,0,0))
a <- makeplot(case1, "A", "Case 1")
b <- makeplot(case2, "B", "Case 2")
c <- makeplot(case3, "C", "Case 3")
d <- makeplot(case4, "D", "Case 4")
e <- makeplot(case5, "E", "Case 5")
f <- makeplot(case6, "F", "Case 6")
mtext("Standardized phenotype", side=2,
outer=TRUE, line=1)
final_2 <- rbind(a,b,c,d,e, f)
(final <- cbind(final_1, final_2))
powdf <- read.csv("../results/Results_10.06.2020/Archive/Power_output_results.csv")
setwd("/Users/lotterhos/Documents/GitHub/CnGV/notebook")
powdf <- read.csv("../results/Results_10.06.2020/Archive/Power_output_results.csv")
vardf <- read.csv("../results/Results_10.06.2020/Archive/Variance_output_results.csv")
PLdf <- read.csv("../results/Results_10.06.2020/Archive/PL_output_results.csv")
phendf <- read.csv("~/Desktop/phenotype_output_results.csv")
head(powdf)
head(vardf)
head(PLdf)
head(phendf)
dim(powdf)
dim(vardf)
dim(PLdf)
summary(powdf$row)
levels(as.factor(powdf$replicate))
summary(vardf$row)
summary(PLdf$row)
sum(!complete.cases(phendf))
dim(phendf)
cases <- powdf$row[powdf$n_env==2 & powdf$n_pop==2]
length(cases)
powdf2 <- powdf[powdf$row %in% cases,]
vardf2 <- vardf[vardf$row %in% cases,]
dim(powdf2)
head(PLdf)
newdf <- merge(powdf2, PLdf, by = "row")
dim(newdf)
str(newdf)
newdf$G1E1mean <- NA
newdf$G1E2mean <- NA
newdf$G2E1mean <- NA
newdf$G2E2mean <- NA
newdf$G1E1mean <- NA
newdf$G1E2mean <- NA
newdf$G2E1mean <- NA
newdf$G2E2mean <- NA
```
i = 1001
cond <- which(phendf$row==i)
tapply(phendf$phen_corrected[cond],as.character(phendf$GE_factor[cond]), mean, na.rm=TRUE)
## compare CovGE and PL
plot(newdf$covariance.x, newdf$PL, xlab="CovGE", ylab="PL"
)
plot(newdf$covariance.x, newdf$PL, ylim=c(-1,2),
xlab="CovGE", ylab="PL", main="Figure 1")
abline(1,0)
abline(0,0)
abline(v=0)
summary(newdf$covariance.x)
hist(newdf$covariance.x, main="", xlab="Distribution of CovGE in simulations", breaks=seq(-1,1,0.1))
summary(newdf$PL)
hist(newdf$PL[newdf$PL<5 & newdf$PL>-5], main="", xlab="Distribution of PL in simulations", breaks=seq(-5,5,0.1))
summary(abs(newdf$PL))
hist(abs(newdf$PL[newdf$PL<5 & newdf$PL>-5]), main="", xlab="Distribution of PL in simulations", breaks=seq(-5,5,0.1))
summary(abs(newdf$PL))
hist(abs(newdf$PL[newdf$PL<5 & newdf$PL>-5]), main="", xlab="Distribution of PL in simulations", breaks=seq(-5,5,0.1))
sum(newdf$PL>0 & newdf$PL<1)/nrow(newdf$PL)
newdf$PL>0 & newdf$PL<1
sum(newdf$PL>0 & newdf$PL<1)/length(newdf$PL)
summary(newdf$PL)
summary(newdf$PL)
summary(newdf$covariance.x)
hist(newdf$covariance.x, main="", xlab="Distribution of CovGE in simulations", breaks=seq(-1,1,0.1))
sum(newdf$covariance.x>0) # proportion of cogradient simulations
sum(newdf$covariance.x>0)/length(newdf$covariance.x) # proportion of cogradient simulations
sum(newdf$covariance.x<0)/length(newdf$covariance.x)
sum(newdf$PL>0 & newdf$PL<1)/length(newdf$PL)
sum(newdf$covariance.x>0)/length(newdf$covariance.x) # proportion of cogradient simulations
summary(newdf$covariance.x)
